# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAddBatch_payload_inner_sales_tax

    ProductAddBatchPayloadInnerSalesTax(;
        tax_percent=nothing,
        taxable=nothing,
    )

    - tax_percent::Float64
    - taxable::Bool
"""
Base.@kwdef mutable struct ProductAddBatchPayloadInnerSalesTax <: OpenAPI.APIModel
    tax_percent::Union{Nothing, Float64} = nothing
    taxable::Union{Nothing, Bool} = nothing

    function ProductAddBatchPayloadInnerSalesTax(tax_percent, taxable, )
        OpenAPI.validate_property(ProductAddBatchPayloadInnerSalesTax, Symbol("tax_percent"), tax_percent)
        OpenAPI.validate_property(ProductAddBatchPayloadInnerSalesTax, Symbol("taxable"), taxable)
        return new(tax_percent, taxable, )
    end
end # type ProductAddBatchPayloadInnerSalesTax

const _property_types_ProductAddBatchPayloadInnerSalesTax = Dict{Symbol,String}(Symbol("tax_percent")=>"Float64", Symbol("taxable")=>"Bool", )
OpenAPI.property_type(::Type{ ProductAddBatchPayloadInnerSalesTax }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddBatchPayloadInnerSalesTax[name]))}

function check_required(o::ProductAddBatchPayloadInnerSalesTax)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddBatchPayloadInnerSalesTax }, name::Symbol, val)

    if name === Symbol("tax_percent")
        OpenAPI.validate_param(name, "ProductAddBatchPayloadInnerSalesTax", :minimum, val, 0, false)
    end

end
