# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductVariantPriceUpdate

    ProductVariantPriceUpdate(;
        id=nothing,
        product_id=nothing,
        group_prices=nothing,
    )

    - id::String : Defines the variant where the price has to be updated
    - product_id::String : Product id
    - group_prices::Vector{ProductPriceUpdateGroupPricesInner} : Defines variants&#39;s group prices
"""
Base.@kwdef mutable struct ProductVariantPriceUpdate <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    product_id::Union{Nothing, String} = nothing
    group_prices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductPriceUpdateGroupPricesInner} }

    function ProductVariantPriceUpdate(id, product_id, group_prices, )
        OpenAPI.validate_property(ProductVariantPriceUpdate, Symbol("id"), id)
        OpenAPI.validate_property(ProductVariantPriceUpdate, Symbol("product_id"), product_id)
        OpenAPI.validate_property(ProductVariantPriceUpdate, Symbol("group_prices"), group_prices)
        return new(id, product_id, group_prices, )
    end
end # type ProductVariantPriceUpdate

const _property_types_ProductVariantPriceUpdate = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("product_id")=>"String", Symbol("group_prices")=>"Vector{ProductPriceUpdateGroupPricesInner}", )
OpenAPI.property_type(::Type{ ProductVariantPriceUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductVariantPriceUpdate[name]))}

function check_required(o::ProductVariantPriceUpdate)
    o.group_prices === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductVariantPriceUpdate }, name::Symbol, val)



end
