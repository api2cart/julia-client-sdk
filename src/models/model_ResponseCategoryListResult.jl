# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Response_Category_List_Result

    ResponseCategoryListResult(;
        categories_count=nothing,
        category=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - categories_count::Int64
    - category::Vector{Category}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ResponseCategoryListResult <: OpenAPI.APIModel
    categories_count::Union{Nothing, Int64} = nothing
    category::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Category} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ResponseCategoryListResult(categories_count, category, additional_fields, custom_fields, )
        OpenAPI.validate_property(ResponseCategoryListResult, Symbol("categories_count"), categories_count)
        OpenAPI.validate_property(ResponseCategoryListResult, Symbol("category"), category)
        OpenAPI.validate_property(ResponseCategoryListResult, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ResponseCategoryListResult, Symbol("custom_fields"), custom_fields)
        return new(categories_count, category, additional_fields, custom_fields, )
    end
end # type ResponseCategoryListResult

const _property_types_ResponseCategoryListResult = Dict{Symbol,String}(Symbol("categories_count")=>"Int64", Symbol("category")=>"Vector{Category}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ResponseCategoryListResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ResponseCategoryListResult[name]))}

function check_required(o::ResponseCategoryListResult)
    true
end

function OpenAPI.validate_property(::Type{ ResponseCategoryListResult }, name::Symbol, val)




end
