# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TaxClass_Rate

    TaxClassRate(;
        id=nothing,
        name=nothing,
        tax=nothing,
        tax_type=nothing,
        tax_based_on=nothing,
        countries=nothing,
        cities=nothing,
        address=nothing,
        zip_codes=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - name::String
    - tax::Float64
    - tax_type::Int64
    - tax_based_on::String
    - countries::Vector{TaxClassCountries}
    - cities::Vector{String}
    - address::Vector{String}
    - zip_codes::Vector{TaxClassZipCodes}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct TaxClassRate <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    tax::Union{Nothing, Float64} = nothing
    tax_type::Union{Nothing, Int64} = nothing
    tax_based_on::Union{Nothing, String} = nothing
    countries::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TaxClassCountries} }
    cities::Union{Nothing, Vector{String}} = nothing
    address::Union{Nothing, Vector{String}} = nothing
    zip_codes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TaxClassZipCodes} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function TaxClassRate(id, name, tax, tax_type, tax_based_on, countries, cities, address, zip_codes, additional_fields, custom_fields, )
        OpenAPI.validate_property(TaxClassRate, Symbol("id"), id)
        OpenAPI.validate_property(TaxClassRate, Symbol("name"), name)
        OpenAPI.validate_property(TaxClassRate, Symbol("tax"), tax)
        OpenAPI.validate_property(TaxClassRate, Symbol("tax_type"), tax_type)
        OpenAPI.validate_property(TaxClassRate, Symbol("tax_based_on"), tax_based_on)
        OpenAPI.validate_property(TaxClassRate, Symbol("countries"), countries)
        OpenAPI.validate_property(TaxClassRate, Symbol("cities"), cities)
        OpenAPI.validate_property(TaxClassRate, Symbol("address"), address)
        OpenAPI.validate_property(TaxClassRate, Symbol("zip_codes"), zip_codes)
        OpenAPI.validate_property(TaxClassRate, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(TaxClassRate, Symbol("custom_fields"), custom_fields)
        return new(id, name, tax, tax_type, tax_based_on, countries, cities, address, zip_codes, additional_fields, custom_fields, )
    end
end # type TaxClassRate

const _property_types_TaxClassRate = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("tax")=>"Float64", Symbol("tax_type")=>"Int64", Symbol("tax_based_on")=>"String", Symbol("countries")=>"Vector{TaxClassCountries}", Symbol("cities")=>"Vector{String}", Symbol("address")=>"Vector{String}", Symbol("zip_codes")=>"Vector{TaxClassZipCodes}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ TaxClassRate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TaxClassRate[name]))}

function check_required(o::TaxClassRate)
    true
end

function OpenAPI.validate_property(::Type{ TaxClassRate }, name::Symbol, val)











end
