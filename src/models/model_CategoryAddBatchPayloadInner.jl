# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryAddBatch_payload_inner

    CategoryAddBatchPayloadInner(;
        name=nothing,
        avail=nothing,
        description=nothing,
        meta_title=nothing,
        meta_description=nothing,
        meta_keywords=nothing,
        parent_id=nothing,
        sort_order=nothing,
        seo_url=nothing,
        store_id=nothing,
        images=nothing,
        stores_ids=nothing,
    )

    - name::String
    - avail::Bool
    - description::String
    - meta_title::String
    - meta_description::String
    - meta_keywords::Vector{String}
    - parent_id::String
    - sort_order::Int64
    - seo_url::String
    - store_id::String
    - images::Vector{CategoryAddBatchPayloadInnerImagesInner}
    - stores_ids::Vector{String}
"""
Base.@kwdef mutable struct CategoryAddBatchPayloadInner <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    avail::Union{Nothing, Bool} = nothing
    description::Union{Nothing, String} = nothing
    meta_title::Union{Nothing, String} = nothing
    meta_description::Union{Nothing, String} = nothing
    meta_keywords::Union{Nothing, Vector{String}} = nothing
    parent_id::Union{Nothing, String} = nothing
    sort_order::Union{Nothing, Int64} = nothing
    seo_url::Union{Nothing, String} = nothing
    store_id::Union{Nothing, String} = nothing
    images::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CategoryAddBatchPayloadInnerImagesInner} }
    stores_ids::Union{Nothing, Vector{String}} = nothing

    function CategoryAddBatchPayloadInner(name, avail, description, meta_title, meta_description, meta_keywords, parent_id, sort_order, seo_url, store_id, images, stores_ids, )
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("name"), name)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("avail"), avail)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("description"), description)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("meta_title"), meta_title)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("meta_description"), meta_description)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("meta_keywords"), meta_keywords)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("parent_id"), parent_id)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("sort_order"), sort_order)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("seo_url"), seo_url)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("store_id"), store_id)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("images"), images)
        OpenAPI.validate_property(CategoryAddBatchPayloadInner, Symbol("stores_ids"), stores_ids)
        return new(name, avail, description, meta_title, meta_description, meta_keywords, parent_id, sort_order, seo_url, store_id, images, stores_ids, )
    end
end # type CategoryAddBatchPayloadInner

const _property_types_CategoryAddBatchPayloadInner = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("avail")=>"Bool", Symbol("description")=>"String", Symbol("meta_title")=>"String", Symbol("meta_description")=>"String", Symbol("meta_keywords")=>"Vector{String}", Symbol("parent_id")=>"String", Symbol("sort_order")=>"Int64", Symbol("seo_url")=>"String", Symbol("store_id")=>"String", Symbol("images")=>"Vector{CategoryAddBatchPayloadInnerImagesInner}", Symbol("stores_ids")=>"Vector{String}", )
OpenAPI.property_type(::Type{ CategoryAddBatchPayloadInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryAddBatchPayloadInner[name]))}

function check_required(o::CategoryAddBatchPayloadInner)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryAddBatchPayloadInner }, name::Symbol, val)






    if name === Symbol("meta_keywords")
        OpenAPI.validate_param(name, "CategoryAddBatchPayloadInner", :minItems, val, 1)
    end





    if name === Symbol("images")
        OpenAPI.validate_param(name, "CategoryAddBatchPayloadInner", :maxItems, val, 1)
    end

    if name === Symbol("stores_ids")
        OpenAPI.validate_param(name, "CategoryAddBatchPayloadInner", :minItems, val, 1)
    end
end
