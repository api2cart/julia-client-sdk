# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomerAddressAdd

    CustomerAddressAdd(;
        customer_id=nothing,
        store_id=nothing,
        first_name=nothing,
        last_name=nothing,
        company=nothing,
        address1=nothing,
        address2=nothing,
        city=nothing,
        country=nothing,
        state=nothing,
        postcode=nothing,
        identification_number=nothing,
        types=nothing,
        default=nothing,
        phone=nothing,
        phone_mobile=nothing,
        fax=nothing,
        website=nothing,
        gender=nothing,
        tax_id=nothing,
        alias=nothing,
    )

    - customer_id::String : Defines customer id
    - store_id::String : Store Id
    - first_name::String : Defines customer&#39;s address first name
    - last_name::String : Defines customer&#39;s address last name
    - company::String : Defines customer&#39;s address company
    - address1::String : Specifies customer&#39;s address address1
    - address2::String : Specifies customer&#39;s address address2
    - city::String : Specifies customer&#39;s address city
    - country::String : Specifies customer&#39;s address ISO code or name of country
    - state::String : Specifies customer&#39;s address ISO code or name of state
    - postcode::String : Specifies customer&#39;s address postcode
    - identification_number::String : Specifies the national ID card number of this person, or a unique tax identification number for customer&#39;s address
    - types::Vector{String} : Specifies customer&#39;s address types
    - default::Bool : Specifies whether the customer&#39;s address is used by default
    - phone::String : Defines customer&#39;s address phone number
    - phone_mobile::String : Defines customer&#39;s address mobile phone number
    - fax::String : Defines customer&#39;s address fax
    - website::String : Defines Link to customer&#39;s address website
    - gender::String : Defines customer&#39;s address gender
    - tax_id::String : Add Tax Id
    - alias::String : Specifies customer&#39;s alias in the address book
"""
Base.@kwdef mutable struct CustomerAddressAdd <: OpenAPI.APIModel
    customer_id::Union{Nothing, String} = nothing
    store_id::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    company::Union{Nothing, String} = nothing
    address1::Union{Nothing, String} = nothing
    address2::Union{Nothing, String} = nothing
    city::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    postcode::Union{Nothing, String} = nothing
    identification_number::Union{Nothing, String} = nothing
    types::Union{Nothing, Vector{String}} = nothing
    default::Union{Nothing, Bool} = nothing
    phone::Union{Nothing, String} = nothing
    phone_mobile::Union{Nothing, String} = nothing
    fax::Union{Nothing, String} = nothing
    website::Union{Nothing, String} = nothing
    gender::Union{Nothing, String} = nothing
    tax_id::Union{Nothing, String} = nothing
    alias::Union{Nothing, String} = nothing

    function CustomerAddressAdd(customer_id, store_id, first_name, last_name, company, address1, address2, city, country, state, postcode, identification_number, types, default, phone, phone_mobile, fax, website, gender, tax_id, alias, )
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("customer_id"), customer_id)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("store_id"), store_id)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("first_name"), first_name)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("last_name"), last_name)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("company"), company)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("address1"), address1)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("address2"), address2)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("city"), city)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("country"), country)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("state"), state)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("postcode"), postcode)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("identification_number"), identification_number)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("types"), types)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("default"), default)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("phone"), phone)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("phone_mobile"), phone_mobile)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("fax"), fax)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("website"), website)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("gender"), gender)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("tax_id"), tax_id)
        OpenAPI.validate_property(CustomerAddressAdd, Symbol("alias"), alias)
        return new(customer_id, store_id, first_name, last_name, company, address1, address2, city, country, state, postcode, identification_number, types, default, phone, phone_mobile, fax, website, gender, tax_id, alias, )
    end
end # type CustomerAddressAdd

const _property_types_CustomerAddressAdd = Dict{Symbol,String}(Symbol("customer_id")=>"String", Symbol("store_id")=>"String", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("company")=>"String", Symbol("address1")=>"String", Symbol("address2")=>"String", Symbol("city")=>"String", Symbol("country")=>"String", Symbol("state")=>"String", Symbol("postcode")=>"String", Symbol("identification_number")=>"String", Symbol("types")=>"Vector{String}", Symbol("default")=>"Bool", Symbol("phone")=>"String", Symbol("phone_mobile")=>"String", Symbol("fax")=>"String", Symbol("website")=>"String", Symbol("gender")=>"String", Symbol("tax_id")=>"String", Symbol("alias")=>"String", )
OpenAPI.property_type(::Type{ CustomerAddressAdd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomerAddressAdd[name]))}

function check_required(o::CustomerAddressAdd)
    o.customer_id === nothing && (return false)
    o.address1 === nothing && (return false)
    o.city === nothing && (return false)
    o.country === nothing && (return false)
    o.postcode === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CustomerAddressAdd }, name::Symbol, val)





















end
