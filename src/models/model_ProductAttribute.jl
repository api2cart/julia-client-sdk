# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Product_Attribute

    ProductAttribute(;
        attribute_id=nothing,
        code=nothing,
        name=nothing,
        lang_id=nothing,
        store_id=nothing,
        value=nothing,
        required=nothing,
        visible=nothing,
        type=nothing,
        position=nothing,
        attribute_group_id=nothing,
        product_id=nothing,
        variant_id=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - attribute_id::String
    - code::String
    - name::String
    - lang_id::String
    - store_id::String
    - value::String
    - required::Bool
    - visible::Bool
    - type::String
    - position::Int64
    - attribute_group_id::String
    - product_id::String
    - variant_id::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ProductAttribute <: OpenAPI.APIModel
    attribute_id::Union{Nothing, String} = nothing
    code::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    lang_id::Union{Nothing, String} = nothing
    store_id::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    required::Union{Nothing, Bool} = nothing
    visible::Union{Nothing, Bool} = nothing
    type::Union{Nothing, String} = nothing
    position::Union{Nothing, Int64} = nothing
    attribute_group_id::Union{Nothing, String} = nothing
    product_id::Union{Nothing, String} = nothing
    variant_id::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ProductAttribute(attribute_id, code, name, lang_id, store_id, value, required, visible, type, position, attribute_group_id, product_id, variant_id, additional_fields, custom_fields, )
        OpenAPI.validate_property(ProductAttribute, Symbol("attribute_id"), attribute_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("code"), code)
        OpenAPI.validate_property(ProductAttribute, Symbol("name"), name)
        OpenAPI.validate_property(ProductAttribute, Symbol("lang_id"), lang_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("store_id"), store_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("value"), value)
        OpenAPI.validate_property(ProductAttribute, Symbol("required"), required)
        OpenAPI.validate_property(ProductAttribute, Symbol("visible"), visible)
        OpenAPI.validate_property(ProductAttribute, Symbol("type"), type)
        OpenAPI.validate_property(ProductAttribute, Symbol("position"), position)
        OpenAPI.validate_property(ProductAttribute, Symbol("attribute_group_id"), attribute_group_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("product_id"), product_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("variant_id"), variant_id)
        OpenAPI.validate_property(ProductAttribute, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ProductAttribute, Symbol("custom_fields"), custom_fields)
        return new(attribute_id, code, name, lang_id, store_id, value, required, visible, type, position, attribute_group_id, product_id, variant_id, additional_fields, custom_fields, )
    end
end # type ProductAttribute

const _property_types_ProductAttribute = Dict{Symbol,String}(Symbol("attribute_id")=>"String", Symbol("code")=>"String", Symbol("name")=>"String", Symbol("lang_id")=>"String", Symbol("store_id")=>"String", Symbol("value")=>"String", Symbol("required")=>"Bool", Symbol("visible")=>"Bool", Symbol("type")=>"String", Symbol("position")=>"Int64", Symbol("attribute_group_id")=>"String", Symbol("product_id")=>"String", Symbol("variant_id")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ProductAttribute }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAttribute[name]))}

function check_required(o::ProductAttribute)
    true
end

function OpenAPI.validate_property(::Type{ ProductAttribute }, name::Symbol, val)















end
