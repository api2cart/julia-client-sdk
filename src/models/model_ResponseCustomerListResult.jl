# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Response_Customer_List_Result

    ResponseCustomerListResult(;
        customers_count=nothing,
        customer=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - customers_count::Int64
    - customer::Vector{Customer}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ResponseCustomerListResult <: OpenAPI.APIModel
    customers_count::Union{Nothing, Int64} = nothing
    customer::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Customer} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ResponseCustomerListResult(customers_count, customer, additional_fields, custom_fields, )
        OpenAPI.validate_property(ResponseCustomerListResult, Symbol("customers_count"), customers_count)
        OpenAPI.validate_property(ResponseCustomerListResult, Symbol("customer"), customer)
        OpenAPI.validate_property(ResponseCustomerListResult, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ResponseCustomerListResult, Symbol("custom_fields"), custom_fields)
        return new(customers_count, customer, additional_fields, custom_fields, )
    end
end # type ResponseCustomerListResult

const _property_types_ResponseCustomerListResult = Dict{Symbol,String}(Symbol("customers_count")=>"Int64", Symbol("customer")=>"Vector{Customer}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ResponseCustomerListResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ResponseCustomerListResult[name]))}

function check_required(o::ResponseCustomerListResult)
    true
end

function OpenAPI.validate_property(::Type{ ResponseCustomerListResult }, name::Symbol, val)




end
