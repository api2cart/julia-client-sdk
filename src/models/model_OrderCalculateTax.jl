# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Order_Calculate_Tax

    OrderCalculateTax(;
        code=nothing,
        rate=nothing,
        value=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - code::String
    - rate::Float64
    - value::Float64
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct OrderCalculateTax <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    rate::Union{Nothing, Float64} = nothing
    value::Union{Nothing, Float64} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function OrderCalculateTax(code, rate, value, additional_fields, custom_fields, )
        OpenAPI.validate_property(OrderCalculateTax, Symbol("code"), code)
        OpenAPI.validate_property(OrderCalculateTax, Symbol("rate"), rate)
        OpenAPI.validate_property(OrderCalculateTax, Symbol("value"), value)
        OpenAPI.validate_property(OrderCalculateTax, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(OrderCalculateTax, Symbol("custom_fields"), custom_fields)
        return new(code, rate, value, additional_fields, custom_fields, )
    end
end # type OrderCalculateTax

const _property_types_OrderCalculateTax = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("rate")=>"Float64", Symbol("value")=>"Float64", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ OrderCalculateTax }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderCalculateTax[name]))}

function check_required(o::OrderCalculateTax)
    true
end

function OpenAPI.validate_property(::Type{ OrderCalculateTax }, name::Symbol, val)





end
