# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""StoreAttribute

    StoreAttribute(;
        id=nothing,
        code=nothing,
        type=nothing,
        name=nothing,
        default_values=nothing,
        position=nothing,
        visible=nothing,
        required=nothing,
        system=nothing,
        values=nothing,
        store_id=nothing,
        lang_id=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - code::String
    - type::String
    - name::String
    - default_values::Vector{String}
    - position::Int64
    - visible::Bool
    - required::Bool
    - system::Bool
    - values::Vector{String}
    - store_id::String
    - lang_id::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct StoreAttribute <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    code::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    default_values::Union{Nothing, Vector{String}} = nothing
    position::Union{Nothing, Int64} = nothing
    visible::Union{Nothing, Bool} = nothing
    required::Union{Nothing, Bool} = nothing
    system::Union{Nothing, Bool} = nothing
    values::Union{Nothing, Vector{String}} = nothing
    store_id::Union{Nothing, String} = nothing
    lang_id::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function StoreAttribute(id, code, type, name, default_values, position, visible, required, system, values, store_id, lang_id, additional_fields, custom_fields, )
        OpenAPI.validate_property(StoreAttribute, Symbol("id"), id)
        OpenAPI.validate_property(StoreAttribute, Symbol("code"), code)
        OpenAPI.validate_property(StoreAttribute, Symbol("type"), type)
        OpenAPI.validate_property(StoreAttribute, Symbol("name"), name)
        OpenAPI.validate_property(StoreAttribute, Symbol("default_values"), default_values)
        OpenAPI.validate_property(StoreAttribute, Symbol("position"), position)
        OpenAPI.validate_property(StoreAttribute, Symbol("visible"), visible)
        OpenAPI.validate_property(StoreAttribute, Symbol("required"), required)
        OpenAPI.validate_property(StoreAttribute, Symbol("system"), system)
        OpenAPI.validate_property(StoreAttribute, Symbol("values"), values)
        OpenAPI.validate_property(StoreAttribute, Symbol("store_id"), store_id)
        OpenAPI.validate_property(StoreAttribute, Symbol("lang_id"), lang_id)
        OpenAPI.validate_property(StoreAttribute, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(StoreAttribute, Symbol("custom_fields"), custom_fields)
        return new(id, code, type, name, default_values, position, visible, required, system, values, store_id, lang_id, additional_fields, custom_fields, )
    end
end # type StoreAttribute

const _property_types_StoreAttribute = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("code")=>"String", Symbol("type")=>"String", Symbol("name")=>"String", Symbol("default_values")=>"Vector{String}", Symbol("position")=>"Int64", Symbol("visible")=>"Bool", Symbol("required")=>"Bool", Symbol("system")=>"Bool", Symbol("values")=>"Vector{String}", Symbol("store_id")=>"String", Symbol("lang_id")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ StoreAttribute }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_StoreAttribute[name]))}

function check_required(o::StoreAttribute)
    true
end

function OpenAPI.validate_property(::Type{ StoreAttribute }, name::Symbol, val)














end
