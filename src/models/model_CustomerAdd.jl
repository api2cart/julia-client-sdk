# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomerAdd

    CustomerAdd(;
        email=nothing,
        first_name=nothing,
        last_name=nothing,
        password=nothing,
        group=nothing,
        group_ids=nothing,
        status="enabled",
        created_time=nothing,
        modified_time=nothing,
        login=nothing,
        last_login=nothing,
        birth_day=nothing,
        news_letter_subscription=nothing,
        consents=nothing,
        gender=nothing,
        website=nothing,
        fax=nothing,
        company=nothing,
        phone=nothing,
        note=nothing,
        country=nothing,
        store_id=nothing,
        address=nothing,
    )

    - email::String : Defines customer&#39;s email
    - first_name::String : Defines customer&#39;s first name
    - last_name::String : Defines customer&#39;s last name
    - password::String : Defines customer&#39;s unique password
    - group::String : Defines the group where the customer
    - group_ids::String : Groups that will be assigned to a customer
    - status::String : Defines customer&#39;s status
    - created_time::String : Entity&#39;s date creation
    - modified_time::String : Entity&#39;s date modification
    - login::String : Specifies customer&#39;s login name
    - last_login::String : Defines customer&#39;s last login time
    - birth_day::String : Defines customer&#39;s birthday
    - news_letter_subscription::Bool : Defines whether the newsletter subscription is available for the user
    - consents::Vector{CustomerAddConsentsInner} : Defines consents to notifications
    - gender::String : Defines customer&#39;s gender
    - website::String : Link to customer website
    - fax::String : Defines customer&#39;s fax
    - company::String : Defines customer&#39;s company
    - phone::String : Defines customer&#39;s phone number
    - note::String : The customer note.
    - country::String : Specifies ISO code or name of country
    - store_id::String : Store Id
    - address::Vector{CustomerAddAddressInner}
"""
Base.@kwdef mutable struct CustomerAdd <: OpenAPI.APIModel
    email::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    password::Union{Nothing, String} = nothing
    group::Union{Nothing, String} = nothing
    group_ids::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = "enabled"
    created_time::Union{Nothing, String} = nothing
    modified_time::Union{Nothing, String} = nothing
    login::Union{Nothing, String} = nothing
    last_login::Union{Nothing, String} = nothing
    birth_day::Union{Nothing, String} = nothing
    news_letter_subscription::Union{Nothing, Bool} = nothing
    consents::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomerAddConsentsInner} }
    gender::Union{Nothing, String} = nothing
    website::Union{Nothing, String} = nothing
    fax::Union{Nothing, String} = nothing
    company::Union{Nothing, String} = nothing
    phone::Union{Nothing, String} = nothing
    note::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    store_id::Union{Nothing, String} = nothing
    address::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomerAddAddressInner} }

    function CustomerAdd(email, first_name, last_name, password, group, group_ids, status, created_time, modified_time, login, last_login, birth_day, news_letter_subscription, consents, gender, website, fax, company, phone, note, country, store_id, address, )
        OpenAPI.validate_property(CustomerAdd, Symbol("email"), email)
        OpenAPI.validate_property(CustomerAdd, Symbol("first_name"), first_name)
        OpenAPI.validate_property(CustomerAdd, Symbol("last_name"), last_name)
        OpenAPI.validate_property(CustomerAdd, Symbol("password"), password)
        OpenAPI.validate_property(CustomerAdd, Symbol("group"), group)
        OpenAPI.validate_property(CustomerAdd, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(CustomerAdd, Symbol("status"), status)
        OpenAPI.validate_property(CustomerAdd, Symbol("created_time"), created_time)
        OpenAPI.validate_property(CustomerAdd, Symbol("modified_time"), modified_time)
        OpenAPI.validate_property(CustomerAdd, Symbol("login"), login)
        OpenAPI.validate_property(CustomerAdd, Symbol("last_login"), last_login)
        OpenAPI.validate_property(CustomerAdd, Symbol("birth_day"), birth_day)
        OpenAPI.validate_property(CustomerAdd, Symbol("news_letter_subscription"), news_letter_subscription)
        OpenAPI.validate_property(CustomerAdd, Symbol("consents"), consents)
        OpenAPI.validate_property(CustomerAdd, Symbol("gender"), gender)
        OpenAPI.validate_property(CustomerAdd, Symbol("website"), website)
        OpenAPI.validate_property(CustomerAdd, Symbol("fax"), fax)
        OpenAPI.validate_property(CustomerAdd, Symbol("company"), company)
        OpenAPI.validate_property(CustomerAdd, Symbol("phone"), phone)
        OpenAPI.validate_property(CustomerAdd, Symbol("note"), note)
        OpenAPI.validate_property(CustomerAdd, Symbol("country"), country)
        OpenAPI.validate_property(CustomerAdd, Symbol("store_id"), store_id)
        OpenAPI.validate_property(CustomerAdd, Symbol("address"), address)
        return new(email, first_name, last_name, password, group, group_ids, status, created_time, modified_time, login, last_login, birth_day, news_letter_subscription, consents, gender, website, fax, company, phone, note, country, store_id, address, )
    end
end # type CustomerAdd

const _property_types_CustomerAdd = Dict{Symbol,String}(Symbol("email")=>"String", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("password")=>"String", Symbol("group")=>"String", Symbol("group_ids")=>"String", Symbol("status")=>"String", Symbol("created_time")=>"String", Symbol("modified_time")=>"String", Symbol("login")=>"String", Symbol("last_login")=>"String", Symbol("birth_day")=>"String", Symbol("news_letter_subscription")=>"Bool", Symbol("consents")=>"Vector{CustomerAddConsentsInner}", Symbol("gender")=>"String", Symbol("website")=>"String", Symbol("fax")=>"String", Symbol("company")=>"String", Symbol("phone")=>"String", Symbol("note")=>"String", Symbol("country")=>"String", Symbol("store_id")=>"String", Symbol("address")=>"Vector{CustomerAddAddressInner}", )
OpenAPI.property_type(::Type{ CustomerAdd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomerAdd[name]))}

function check_required(o::CustomerAdd)
    o.email === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CustomerAdd }, name::Symbol, val)














    if name === Symbol("consents")
        OpenAPI.validate_param(name, "CustomerAdd", :minItems, val, 1)
    end









end
