# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductVariantAddBatch

    ProductVariantAddBatch(;
        clear_cache=false,
        reindex=false,
        payload=nothing,
    )

    - clear_cache::Bool
    - reindex::Bool
    - payload::Vector{ProductVariantAddBatchPayloadInner} : Contains an array of product variants objects. The list of properties may vary depending on the specific platform.
"""
Base.@kwdef mutable struct ProductVariantAddBatch <: OpenAPI.APIModel
    clear_cache::Union{Nothing, Bool} = false
    reindex::Union{Nothing, Bool} = false
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductVariantAddBatchPayloadInner} }

    function ProductVariantAddBatch(clear_cache, reindex, payload, )
        OpenAPI.validate_property(ProductVariantAddBatch, Symbol("clear_cache"), clear_cache)
        OpenAPI.validate_property(ProductVariantAddBatch, Symbol("reindex"), reindex)
        OpenAPI.validate_property(ProductVariantAddBatch, Symbol("payload"), payload)
        return new(clear_cache, reindex, payload, )
    end
end # type ProductVariantAddBatch

const _property_types_ProductVariantAddBatch = Dict{Symbol,String}(Symbol("clear_cache")=>"Bool", Symbol("reindex")=>"Bool", Symbol("payload")=>"Vector{ProductVariantAddBatchPayloadInner}", )
OpenAPI.property_type(::Type{ ProductVariantAddBatch }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductVariantAddBatch[name]))}

function check_required(o::ProductVariantAddBatch)
    o.payload === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductVariantAddBatch }, name::Symbol, val)



    if name === Symbol("payload")
        OpenAPI.validate_param(name, "ProductVariantAddBatch", :maxItems, val, 250)
        OpenAPI.validate_param(name, "ProductVariantAddBatch", :minItems, val, 1)
    end
end
