# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Cart_Channel

    CartChannel(;
        id=nothing,
        name=nothing,
        platform=nothing,
        is_enabled=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - name::String
    - platform::String
    - is_enabled::Bool
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct CartChannel <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    platform::Union{Nothing, String} = nothing
    is_enabled::Union{Nothing, Bool} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function CartChannel(id, name, platform, is_enabled, additional_fields, custom_fields, )
        OpenAPI.validate_property(CartChannel, Symbol("id"), id)
        OpenAPI.validate_property(CartChannel, Symbol("name"), name)
        OpenAPI.validate_property(CartChannel, Symbol("platform"), platform)
        OpenAPI.validate_property(CartChannel, Symbol("is_enabled"), is_enabled)
        OpenAPI.validate_property(CartChannel, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(CartChannel, Symbol("custom_fields"), custom_fields)
        return new(id, name, platform, is_enabled, additional_fields, custom_fields, )
    end
end # type CartChannel

const _property_types_CartChannel = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("platform")=>"String", Symbol("is_enabled")=>"Bool", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ CartChannel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CartChannel[name]))}

function check_required(o::CartChannel)
    true
end

function OpenAPI.validate_property(::Type{ CartChannel }, name::Symbol, val)






end
