# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Product_Review

    ProductReview(;
        id=nothing,
        product_id=nothing,
        customer_id=nothing,
        nick_name=nothing,
        email=nothing,
        summary=nothing,
        message=nothing,
        rating=nothing,
        ratings=nothing,
        status=nothing,
        created_time=nothing,
        medias=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - product_id::String
    - customer_id::String
    - nick_name::String
    - email::String
    - summary::String
    - message::String
    - rating::Float64
    - ratings::Vector{ProductReviewRating}
    - status::String
    - created_time::A2CDateTime
    - medias::Vector{Media}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ProductReview <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    product_id::Union{Nothing, String} = nothing
    customer_id::Union{Nothing, String} = nothing
    nick_name::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    summary::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    rating::Union{Nothing, Float64} = nothing
    ratings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductReviewRating} }
    status::Union{Nothing, String} = nothing
    created_time = nothing # spec type: Union{ Nothing, A2CDateTime }
    medias::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Media} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ProductReview(id, product_id, customer_id, nick_name, email, summary, message, rating, ratings, status, created_time, medias, additional_fields, custom_fields, )
        OpenAPI.validate_property(ProductReview, Symbol("id"), id)
        OpenAPI.validate_property(ProductReview, Symbol("product_id"), product_id)
        OpenAPI.validate_property(ProductReview, Symbol("customer_id"), customer_id)
        OpenAPI.validate_property(ProductReview, Symbol("nick_name"), nick_name)
        OpenAPI.validate_property(ProductReview, Symbol("email"), email)
        OpenAPI.validate_property(ProductReview, Symbol("summary"), summary)
        OpenAPI.validate_property(ProductReview, Symbol("message"), message)
        OpenAPI.validate_property(ProductReview, Symbol("rating"), rating)
        OpenAPI.validate_property(ProductReview, Symbol("ratings"), ratings)
        OpenAPI.validate_property(ProductReview, Symbol("status"), status)
        OpenAPI.validate_property(ProductReview, Symbol("created_time"), created_time)
        OpenAPI.validate_property(ProductReview, Symbol("medias"), medias)
        OpenAPI.validate_property(ProductReview, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ProductReview, Symbol("custom_fields"), custom_fields)
        return new(id, product_id, customer_id, nick_name, email, summary, message, rating, ratings, status, created_time, medias, additional_fields, custom_fields, )
    end
end # type ProductReview

const _property_types_ProductReview = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("product_id")=>"String", Symbol("customer_id")=>"String", Symbol("nick_name")=>"String", Symbol("email")=>"String", Symbol("summary")=>"String", Symbol("message")=>"String", Symbol("rating")=>"Float64", Symbol("ratings")=>"Vector{ProductReviewRating}", Symbol("status")=>"String", Symbol("created_time")=>"A2CDateTime", Symbol("medias")=>"Vector{Media}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ProductReview }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductReview[name]))}

function check_required(o::ProductReview)
    true
end

function OpenAPI.validate_property(::Type{ ProductReview }, name::Symbol, val)














end
