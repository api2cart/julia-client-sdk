# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAdd_package_details
If the seller is subscribed to \&quot;Business Policies\&quot;, use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;package_details[&lt;b&gt;measure_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed measure_unit values: [English or Metric] &lt;/br&gt; Default: Metric&lt;/br&gt;package_details[&lt;b&gt;weigh_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed weigh_unit values: [kg, g, lbs, oz]&lt;/br&gt;package_details[&lt;b&gt;package_depth&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_length&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_width&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_major&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_minor&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;shipping_package&lt;/b&gt;] &#x3D; string&lt;/br&gt; See cart.info method, param &#x60;eBay_shipping_package_details&#x60;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;

    ProductAddPackageDetails(;
        measure_unit=nothing,
        weigh_unit=nothing,
        package_depth=nothing,
        package_length=nothing,
        package_width=nothing,
        weight_major=nothing,
        weight_minor=nothing,
        shipping_package=nothing,
    )

    - measure_unit::String
    - weigh_unit::String
    - package_depth::Float64
    - package_length::Float64
    - package_width::Float64
    - weight_major::Float64
    - weight_minor::Float64
    - shipping_package::String
"""
Base.@kwdef mutable struct ProductAddPackageDetails <: OpenAPI.APIModel
    measure_unit::Union{Nothing, String} = nothing
    weigh_unit::Union{Nothing, String} = nothing
    package_depth::Union{Nothing, Float64} = nothing
    package_length::Union{Nothing, Float64} = nothing
    package_width::Union{Nothing, Float64} = nothing
    weight_major::Union{Nothing, Float64} = nothing
    weight_minor::Union{Nothing, Float64} = nothing
    shipping_package::Union{Nothing, String} = nothing

    function ProductAddPackageDetails(measure_unit, weigh_unit, package_depth, package_length, package_width, weight_major, weight_minor, shipping_package, )
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("measure_unit"), measure_unit)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("weigh_unit"), weigh_unit)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("package_depth"), package_depth)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("package_length"), package_length)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("package_width"), package_width)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("weight_major"), weight_major)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("weight_minor"), weight_minor)
        OpenAPI.validate_property(ProductAddPackageDetails, Symbol("shipping_package"), shipping_package)
        return new(measure_unit, weigh_unit, package_depth, package_length, package_width, weight_major, weight_minor, shipping_package, )
    end
end # type ProductAddPackageDetails

const _property_types_ProductAddPackageDetails = Dict{Symbol,String}(Symbol("measure_unit")=>"String", Symbol("weigh_unit")=>"String", Symbol("package_depth")=>"Float64", Symbol("package_length")=>"Float64", Symbol("package_width")=>"Float64", Symbol("weight_major")=>"Float64", Symbol("weight_minor")=>"Float64", Symbol("shipping_package")=>"String", )
OpenAPI.property_type(::Type{ ProductAddPackageDetails }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddPackageDetails[name]))}

function check_required(o::ProductAddPackageDetails)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddPackageDetails }, name::Symbol, val)








end
