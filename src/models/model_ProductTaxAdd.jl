# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductTaxAdd

    ProductTaxAdd(;
        product_id=nothing,
        name=nothing,
        tax_rates=nothing,
    )

    - product_id::String : Defines products specified by product id
    - name::String : Defines tax class name where tax has to be added
    - tax_rates::Vector{ProductTaxAddTaxRatesInner} : Defines tax rates of specified tax classes
"""
Base.@kwdef mutable struct ProductTaxAdd <: OpenAPI.APIModel
    product_id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    tax_rates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductTaxAddTaxRatesInner} }

    function ProductTaxAdd(product_id, name, tax_rates, )
        OpenAPI.validate_property(ProductTaxAdd, Symbol("product_id"), product_id)
        OpenAPI.validate_property(ProductTaxAdd, Symbol("name"), name)
        OpenAPI.validate_property(ProductTaxAdd, Symbol("tax_rates"), tax_rates)
        return new(product_id, name, tax_rates, )
    end
end # type ProductTaxAdd

const _property_types_ProductTaxAdd = Dict{Symbol,String}(Symbol("product_id")=>"String", Symbol("name")=>"String", Symbol("tax_rates")=>"Vector{ProductTaxAddTaxRatesInner}", )
OpenAPI.property_type(::Type{ ProductTaxAdd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductTaxAdd[name]))}

function check_required(o::ProductTaxAdd)
    o.name === nothing && (return false)
    o.tax_rates === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductTaxAdd }, name::Symbol, val)



end
