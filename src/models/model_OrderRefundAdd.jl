# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderRefundAdd

    OrderRefundAdd(;
        order_id=nothing,
        items=nothing,
        total_price=nothing,
        shipping_price=nothing,
        fee_price=nothing,
        message=nothing,
        item_restock=false,
        send_notifications=false,
        date=nothing,
        is_online=false,
    )

    - order_id::String : Defines the order for which the refund will be created.
    - items::Vector{OrderRefundAddItemsInner} : Defines items in the order that will be refunded
    - total_price::Float64 : Defines order refund amount.
    - shipping_price::Float64 : Defines refund shipping amount.
    - fee_price::Float64 : Specifies refund&#39;s fee price
    - message::String : Refund reason, or some else message which assigned to refund.
    - item_restock::Bool : Boolean, whether or not to add the line items back to the store inventory.
    - send_notifications::Bool : Send notifications to customer after refund was created
    - date::String : Specifies an order creation date in format Y-m-d H:i:s
    - is_online::Bool : Indicates whether refund type is online
"""
Base.@kwdef mutable struct OrderRefundAdd <: OpenAPI.APIModel
    order_id::Union{Nothing, String} = nothing
    items::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderRefundAddItemsInner} }
    total_price::Union{Nothing, Float64} = nothing
    shipping_price::Union{Nothing, Float64} = nothing
    fee_price::Union{Nothing, Float64} = nothing
    message::Union{Nothing, String} = nothing
    item_restock::Union{Nothing, Bool} = false
    send_notifications::Union{Nothing, Bool} = false
    date::Union{Nothing, String} = nothing
    is_online::Union{Nothing, Bool} = false

    function OrderRefundAdd(order_id, items, total_price, shipping_price, fee_price, message, item_restock, send_notifications, date, is_online, )
        OpenAPI.validate_property(OrderRefundAdd, Symbol("order_id"), order_id)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("items"), items)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("total_price"), total_price)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("shipping_price"), shipping_price)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("fee_price"), fee_price)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("message"), message)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("item_restock"), item_restock)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("send_notifications"), send_notifications)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("date"), date)
        OpenAPI.validate_property(OrderRefundAdd, Symbol("is_online"), is_online)
        return new(order_id, items, total_price, shipping_price, fee_price, message, item_restock, send_notifications, date, is_online, )
    end
end # type OrderRefundAdd

const _property_types_OrderRefundAdd = Dict{Symbol,String}(Symbol("order_id")=>"String", Symbol("items")=>"Vector{OrderRefundAddItemsInner}", Symbol("total_price")=>"Float64", Symbol("shipping_price")=>"Float64", Symbol("fee_price")=>"Float64", Symbol("message")=>"String", Symbol("item_restock")=>"Bool", Symbol("send_notifications")=>"Bool", Symbol("date")=>"String", Symbol("is_online")=>"Bool", )
OpenAPI.property_type(::Type{ OrderRefundAdd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderRefundAdd[name]))}

function check_required(o::OrderRefundAdd)
    true
end

function OpenAPI.validate_property(::Type{ OrderRefundAdd }, name::Symbol, val)










end
