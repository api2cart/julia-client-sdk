# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAdd_certifications_inner

    ProductAddCertificationsInner(;
        id=nothing,
        images=nothing,
        files=nothing,
    )

    - id::String : Certification ID
    - images::Vector{ProductAddCertificationsInnerImagesInner} : Certification images
    - files::Vector{ProductAddCertificationsInnerFilesInner} : Certification files
"""
Base.@kwdef mutable struct ProductAddCertificationsInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    images::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductAddCertificationsInnerImagesInner} }
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductAddCertificationsInnerFilesInner} }

    function ProductAddCertificationsInner(id, images, files, )
        OpenAPI.validate_property(ProductAddCertificationsInner, Symbol("id"), id)
        OpenAPI.validate_property(ProductAddCertificationsInner, Symbol("images"), images)
        OpenAPI.validate_property(ProductAddCertificationsInner, Symbol("files"), files)
        return new(id, images, files, )
    end
end # type ProductAddCertificationsInner

const _property_types_ProductAddCertificationsInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("images")=>"Vector{ProductAddCertificationsInnerImagesInner}", Symbol("files")=>"Vector{ProductAddCertificationsInnerFilesInner}", )
OpenAPI.property_type(::Type{ ProductAddCertificationsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddCertificationsInner[name]))}

function check_required(o::ProductAddCertificationsInner)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddCertificationsInner }, name::Symbol, val)



end
