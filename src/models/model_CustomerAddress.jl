# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Customer_Address

    CustomerAddress(;
        id=nothing,
        type=nothing,
        first_name=nothing,
        last_name=nothing,
        postcode=nothing,
        address1=nothing,
        address2=nothing,
        phone=nothing,
        phone_mobile=nothing,
        city=nothing,
        country=nothing,
        state=nothing,
        company=nothing,
        fax=nothing,
        website=nothing,
        gender=nothing,
        region=nothing,
        default=nothing,
        tax_id=nothing,
        identification_number=nothing,
        alias=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - type::String
    - first_name::String
    - last_name::String
    - postcode::String
    - address1::String
    - address2::String
    - phone::String
    - phone_mobile::String
    - city::String
    - country::Country
    - state::State
    - company::String
    - fax::String
    - website::String
    - gender::String
    - region::String
    - default::Bool
    - tax_id::String
    - identification_number::String
    - alias::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct CustomerAddress <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    postcode::Union{Nothing, String} = nothing
    address1::Union{Nothing, String} = nothing
    address2::Union{Nothing, String} = nothing
    phone::Union{Nothing, String} = nothing
    phone_mobile::Union{Nothing, String} = nothing
    city::Union{Nothing, String} = nothing
    country = nothing # spec type: Union{ Nothing, Country }
    state = nothing # spec type: Union{ Nothing, State }
    company::Union{Nothing, String} = nothing
    fax::Union{Nothing, String} = nothing
    website::Union{Nothing, String} = nothing
    gender::Union{Nothing, String} = nothing
    region::Union{Nothing, String} = nothing
    default::Union{Nothing, Bool} = nothing
    tax_id::Union{Nothing, String} = nothing
    identification_number::Union{Nothing, String} = nothing
    alias::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function CustomerAddress(id, type, first_name, last_name, postcode, address1, address2, phone, phone_mobile, city, country, state, company, fax, website, gender, region, default, tax_id, identification_number, alias, additional_fields, custom_fields, )
        OpenAPI.validate_property(CustomerAddress, Symbol("id"), id)
        OpenAPI.validate_property(CustomerAddress, Symbol("type"), type)
        OpenAPI.validate_property(CustomerAddress, Symbol("first_name"), first_name)
        OpenAPI.validate_property(CustomerAddress, Symbol("last_name"), last_name)
        OpenAPI.validate_property(CustomerAddress, Symbol("postcode"), postcode)
        OpenAPI.validate_property(CustomerAddress, Symbol("address1"), address1)
        OpenAPI.validate_property(CustomerAddress, Symbol("address2"), address2)
        OpenAPI.validate_property(CustomerAddress, Symbol("phone"), phone)
        OpenAPI.validate_property(CustomerAddress, Symbol("phone_mobile"), phone_mobile)
        OpenAPI.validate_property(CustomerAddress, Symbol("city"), city)
        OpenAPI.validate_property(CustomerAddress, Symbol("country"), country)
        OpenAPI.validate_property(CustomerAddress, Symbol("state"), state)
        OpenAPI.validate_property(CustomerAddress, Symbol("company"), company)
        OpenAPI.validate_property(CustomerAddress, Symbol("fax"), fax)
        OpenAPI.validate_property(CustomerAddress, Symbol("website"), website)
        OpenAPI.validate_property(CustomerAddress, Symbol("gender"), gender)
        OpenAPI.validate_property(CustomerAddress, Symbol("region"), region)
        OpenAPI.validate_property(CustomerAddress, Symbol("default"), default)
        OpenAPI.validate_property(CustomerAddress, Symbol("tax_id"), tax_id)
        OpenAPI.validate_property(CustomerAddress, Symbol("identification_number"), identification_number)
        OpenAPI.validate_property(CustomerAddress, Symbol("alias"), alias)
        OpenAPI.validate_property(CustomerAddress, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(CustomerAddress, Symbol("custom_fields"), custom_fields)
        return new(id, type, first_name, last_name, postcode, address1, address2, phone, phone_mobile, city, country, state, company, fax, website, gender, region, default, tax_id, identification_number, alias, additional_fields, custom_fields, )
    end
end # type CustomerAddress

const _property_types_CustomerAddress = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("postcode")=>"String", Symbol("address1")=>"String", Symbol("address2")=>"String", Symbol("phone")=>"String", Symbol("phone_mobile")=>"String", Symbol("city")=>"String", Symbol("country")=>"Country", Symbol("state")=>"State", Symbol("company")=>"String", Symbol("fax")=>"String", Symbol("website")=>"String", Symbol("gender")=>"String", Symbol("region")=>"String", Symbol("default")=>"Bool", Symbol("tax_id")=>"String", Symbol("identification_number")=>"String", Symbol("alias")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ CustomerAddress }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomerAddress[name]))}

function check_required(o::CustomerAddress)
    true
end

function OpenAPI.validate_property(::Type{ CustomerAddress }, name::Symbol, val)























end
