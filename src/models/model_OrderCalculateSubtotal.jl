# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Order_Calculate_Subtotal

    OrderCalculateSubtotal(;
        value=nothing,
        tax=nothing,
        discount=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - value::Float64
    - tax::Float64
    - discount::Float64
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct OrderCalculateSubtotal <: OpenAPI.APIModel
    value::Union{Nothing, Float64} = nothing
    tax::Union{Nothing, Float64} = nothing
    discount::Union{Nothing, Float64} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function OrderCalculateSubtotal(value, tax, discount, additional_fields, custom_fields, )
        OpenAPI.validate_property(OrderCalculateSubtotal, Symbol("value"), value)
        OpenAPI.validate_property(OrderCalculateSubtotal, Symbol("tax"), tax)
        OpenAPI.validate_property(OrderCalculateSubtotal, Symbol("discount"), discount)
        OpenAPI.validate_property(OrderCalculateSubtotal, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(OrderCalculateSubtotal, Symbol("custom_fields"), custom_fields)
        return new(value, tax, discount, additional_fields, custom_fields, )
    end
end # type OrderCalculateSubtotal

const _property_types_OrderCalculateSubtotal = Dict{Symbol,String}(Symbol("value")=>"Float64", Symbol("tax")=>"Float64", Symbol("discount")=>"Float64", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ OrderCalculateSubtotal }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderCalculateSubtotal[name]))}

function check_required(o::OrderCalculateSubtotal)
    true
end

function OpenAPI.validate_property(::Type{ OrderCalculateSubtotal }, name::Symbol, val)





end
