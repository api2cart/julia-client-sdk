# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Cart_ShippingMethod

    CartShippingMethod(;
        name=nothing,
        handling_fee=nothing,
        handling_enabled=nothing,
        handling_type=nothing,
        default_price=nothing,
        default_price_type=nothing,
        type=nothing,
        enabled=nothing,
        min_order_amount=nothing,
        rates=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - name::String
    - handling_fee::String
    - handling_enabled::String
    - handling_type::String
    - default_price::String
    - default_price_type::String
    - type::String
    - enabled::String
    - min_order_amount::String
    - rates::Vector{CartShippingMethodRate}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct CartShippingMethod <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    handling_fee::Union{Nothing, String} = nothing
    handling_enabled::Union{Nothing, String} = nothing
    handling_type::Union{Nothing, String} = nothing
    default_price::Union{Nothing, String} = nothing
    default_price_type::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    enabled::Union{Nothing, String} = nothing
    min_order_amount::Union{Nothing, String} = nothing
    rates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CartShippingMethodRate} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function CartShippingMethod(name, handling_fee, handling_enabled, handling_type, default_price, default_price_type, type, enabled, min_order_amount, rates, additional_fields, custom_fields, )
        OpenAPI.validate_property(CartShippingMethod, Symbol("name"), name)
        OpenAPI.validate_property(CartShippingMethod, Symbol("handling_fee"), handling_fee)
        OpenAPI.validate_property(CartShippingMethod, Symbol("handling_enabled"), handling_enabled)
        OpenAPI.validate_property(CartShippingMethod, Symbol("handling_type"), handling_type)
        OpenAPI.validate_property(CartShippingMethod, Symbol("default_price"), default_price)
        OpenAPI.validate_property(CartShippingMethod, Symbol("default_price_type"), default_price_type)
        OpenAPI.validate_property(CartShippingMethod, Symbol("type"), type)
        OpenAPI.validate_property(CartShippingMethod, Symbol("enabled"), enabled)
        OpenAPI.validate_property(CartShippingMethod, Symbol("min_order_amount"), min_order_amount)
        OpenAPI.validate_property(CartShippingMethod, Symbol("rates"), rates)
        OpenAPI.validate_property(CartShippingMethod, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(CartShippingMethod, Symbol("custom_fields"), custom_fields)
        return new(name, handling_fee, handling_enabled, handling_type, default_price, default_price_type, type, enabled, min_order_amount, rates, additional_fields, custom_fields, )
    end
end # type CartShippingMethod

const _property_types_CartShippingMethod = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("handling_fee")=>"String", Symbol("handling_enabled")=>"String", Symbol("handling_type")=>"String", Symbol("default_price")=>"String", Symbol("default_price_type")=>"String", Symbol("type")=>"String", Symbol("enabled")=>"String", Symbol("min_order_amount")=>"String", Symbol("rates")=>"Vector{CartShippingMethodRate}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ CartShippingMethod }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CartShippingMethod[name]))}

function check_required(o::CartShippingMethod)
    true
end

function OpenAPI.validate_property(::Type{ CartShippingMethod }, name::Symbol, val)












end
