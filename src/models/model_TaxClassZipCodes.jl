# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TaxClass_ZipCodes

    TaxClassZipCodes(;
        is_range=nothing,
        range=nothing,
        fields=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - is_range::Bool
    - range::Vector{String}
    - fields::Vector{TaxClassZipCodesRange}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct TaxClassZipCodes <: OpenAPI.APIModel
    is_range::Union{Nothing, Bool} = nothing
    range::Union{Nothing, Vector{String}} = nothing
    fields::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TaxClassZipCodesRange} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function TaxClassZipCodes(is_range, range, fields, additional_fields, custom_fields, )
        OpenAPI.validate_property(TaxClassZipCodes, Symbol("is_range"), is_range)
        OpenAPI.validate_property(TaxClassZipCodes, Symbol("range"), range)
        OpenAPI.validate_property(TaxClassZipCodes, Symbol("fields"), fields)
        OpenAPI.validate_property(TaxClassZipCodes, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(TaxClassZipCodes, Symbol("custom_fields"), custom_fields)
        return new(is_range, range, fields, additional_fields, custom_fields, )
    end
end # type TaxClassZipCodes

const _property_types_TaxClassZipCodes = Dict{Symbol,String}(Symbol("is_range")=>"Bool", Symbol("range")=>"Vector{String}", Symbol("fields")=>"Vector{TaxClassZipCodesRange}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ TaxClassZipCodes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TaxClassZipCodes[name]))}

function check_required(o::TaxClassZipCodes)
    true
end

function OpenAPI.validate_property(::Type{ TaxClassZipCodes }, name::Symbol, val)





end
