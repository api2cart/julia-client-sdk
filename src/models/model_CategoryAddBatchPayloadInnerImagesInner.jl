# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryAddBatch_payload_inner_images_inner

    CategoryAddBatchPayloadInnerImagesInner(;
        url=nothing,
        image_name=nothing,
        type=nothing,
        label=nothing,
    )

    - url::String
    - image_name::String
    - type::String
    - label::String
"""
Base.@kwdef mutable struct CategoryAddBatchPayloadInnerImagesInner <: OpenAPI.APIModel
    url::Union{Nothing, String} = nothing
    image_name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing

    function CategoryAddBatchPayloadInnerImagesInner(url, image_name, type, label, )
        OpenAPI.validate_property(CategoryAddBatchPayloadInnerImagesInner, Symbol("url"), url)
        OpenAPI.validate_property(CategoryAddBatchPayloadInnerImagesInner, Symbol("image_name"), image_name)
        OpenAPI.validate_property(CategoryAddBatchPayloadInnerImagesInner, Symbol("type"), type)
        OpenAPI.validate_property(CategoryAddBatchPayloadInnerImagesInner, Symbol("label"), label)
        return new(url, image_name, type, label, )
    end
end # type CategoryAddBatchPayloadInnerImagesInner

const _property_types_CategoryAddBatchPayloadInnerImagesInner = Dict{Symbol,String}(Symbol("url")=>"String", Symbol("image_name")=>"String", Symbol("type")=>"String", Symbol("label")=>"String", )
OpenAPI.property_type(::Type{ CategoryAddBatchPayloadInnerImagesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryAddBatchPayloadInnerImagesInner[name]))}

function check_required(o::CategoryAddBatchPayloadInnerImagesInner)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryAddBatchPayloadInnerImagesInner }, name::Symbol, val)




end
