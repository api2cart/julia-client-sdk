# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Product_Option

    ProductOption(;
        id=nothing,
        product_option_id=nothing,
        name=nothing,
        description=nothing,
        sort_order=nothing,
        type=nothing,
        required=nothing,
        available=nothing,
        used_in_combination=nothing,
        option_items=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - product_option_id::String
    - name::String
    - description::String
    - sort_order::Int64
    - type::String
    - required::Bool
    - available::Bool
    - used_in_combination::Bool
    - option_items::Vector{ProductOptionItem}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ProductOption <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    product_option_id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    sort_order::Union{Nothing, Int64} = nothing
    type::Union{Nothing, String} = nothing
    required::Union{Nothing, Bool} = nothing
    available::Union{Nothing, Bool} = nothing
    used_in_combination::Union{Nothing, Bool} = nothing
    option_items::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductOptionItem} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ProductOption(id, product_option_id, name, description, sort_order, type, required, available, used_in_combination, option_items, additional_fields, custom_fields, )
        OpenAPI.validate_property(ProductOption, Symbol("id"), id)
        OpenAPI.validate_property(ProductOption, Symbol("product_option_id"), product_option_id)
        OpenAPI.validate_property(ProductOption, Symbol("name"), name)
        OpenAPI.validate_property(ProductOption, Symbol("description"), description)
        OpenAPI.validate_property(ProductOption, Symbol("sort_order"), sort_order)
        OpenAPI.validate_property(ProductOption, Symbol("type"), type)
        OpenAPI.validate_property(ProductOption, Symbol("required"), required)
        OpenAPI.validate_property(ProductOption, Symbol("available"), available)
        OpenAPI.validate_property(ProductOption, Symbol("used_in_combination"), used_in_combination)
        OpenAPI.validate_property(ProductOption, Symbol("option_items"), option_items)
        OpenAPI.validate_property(ProductOption, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ProductOption, Symbol("custom_fields"), custom_fields)
        return new(id, product_option_id, name, description, sort_order, type, required, available, used_in_combination, option_items, additional_fields, custom_fields, )
    end
end # type ProductOption

const _property_types_ProductOption = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("product_option_id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("sort_order")=>"Int64", Symbol("type")=>"String", Symbol("required")=>"Bool", Symbol("available")=>"Bool", Symbol("used_in_combination")=>"Bool", Symbol("option_items")=>"Vector{ProductOptionItem}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ProductOption }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductOption[name]))}

function check_required(o::ProductOption)
    true
end

function OpenAPI.validate_property(::Type{ ProductOption }, name::Symbol, val)












end
