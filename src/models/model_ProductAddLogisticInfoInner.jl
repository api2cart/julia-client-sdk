# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAdd_logistic_info_inner

    ProductAddLogisticInfoInner(;
        logistic_id=nothing,
        is_free=nothing,
        shipping_fee=nothing,
        size_id=nothing,
    )

    - logistic_id::Float64
    - is_free::Bool
    - shipping_fee::Float64
    - size_id::Float64
"""
Base.@kwdef mutable struct ProductAddLogisticInfoInner <: OpenAPI.APIModel
    logistic_id::Union{Nothing, Float64} = nothing
    is_free::Union{Nothing, Bool} = nothing
    shipping_fee::Union{Nothing, Float64} = nothing
    size_id::Union{Nothing, Float64} = nothing

    function ProductAddLogisticInfoInner(logistic_id, is_free, shipping_fee, size_id, )
        OpenAPI.validate_property(ProductAddLogisticInfoInner, Symbol("logistic_id"), logistic_id)
        OpenAPI.validate_property(ProductAddLogisticInfoInner, Symbol("is_free"), is_free)
        OpenAPI.validate_property(ProductAddLogisticInfoInner, Symbol("shipping_fee"), shipping_fee)
        OpenAPI.validate_property(ProductAddLogisticInfoInner, Symbol("size_id"), size_id)
        return new(logistic_id, is_free, shipping_fee, size_id, )
    end
end # type ProductAddLogisticInfoInner

const _property_types_ProductAddLogisticInfoInner = Dict{Symbol,String}(Symbol("logistic_id")=>"Float64", Symbol("is_free")=>"Bool", Symbol("shipping_fee")=>"Float64", Symbol("size_id")=>"Float64", )
OpenAPI.property_type(::Type{ ProductAddLogisticInfoInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddLogisticInfoInner[name]))}

function check_required(o::ProductAddLogisticInfoInner)
    o.logistic_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddLogisticInfoInner }, name::Symbol, val)




end
