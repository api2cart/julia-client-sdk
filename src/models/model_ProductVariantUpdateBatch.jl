# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductVariantUpdateBatch

    ProductVariantUpdateBatch(;
        nested_items_update_behaviour="replace",
        clear_cache=false,
        reindex=false,
        payload=nothing,
    )

    - nested_items_update_behaviour::String :  Determines how updates to nested items should be handled.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;  Values description:  &lt;div style&#x3D;\&quot;margin-left: 2%; padding-top: 2%\&quot;&gt;    &lt;div style&#x3D;\&quot;font-size:85%\&quot;&gt;      &lt;b&gt;  replace&lt;/b&gt;: This option indicates that the nested items should be completely replaced with the new data provided. &lt;/br&gt;      &lt;b&gt;  merge&lt;/b&gt;: With this option, updates to nested items are merged with the existing data. &lt;/br&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;
    - clear_cache::Bool
    - reindex::Bool
    - payload::Vector{ProductVariantUpdateBatchPayloadInner} : Contains an array of product objects. The list of properties may vary depending on the specific platform.
"""
Base.@kwdef mutable struct ProductVariantUpdateBatch <: OpenAPI.APIModel
    nested_items_update_behaviour::Union{Nothing, String} = "replace"
    clear_cache::Union{Nothing, Bool} = false
    reindex::Union{Nothing, Bool} = false
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProductVariantUpdateBatchPayloadInner} }

    function ProductVariantUpdateBatch(nested_items_update_behaviour, clear_cache, reindex, payload, )
        OpenAPI.validate_property(ProductVariantUpdateBatch, Symbol("nested_items_update_behaviour"), nested_items_update_behaviour)
        OpenAPI.validate_property(ProductVariantUpdateBatch, Symbol("clear_cache"), clear_cache)
        OpenAPI.validate_property(ProductVariantUpdateBatch, Symbol("reindex"), reindex)
        OpenAPI.validate_property(ProductVariantUpdateBatch, Symbol("payload"), payload)
        return new(nested_items_update_behaviour, clear_cache, reindex, payload, )
    end
end # type ProductVariantUpdateBatch

const _property_types_ProductVariantUpdateBatch = Dict{Symbol,String}(Symbol("nested_items_update_behaviour")=>"String", Symbol("clear_cache")=>"Bool", Symbol("reindex")=>"Bool", Symbol("payload")=>"Vector{ProductVariantUpdateBatchPayloadInner}", )
OpenAPI.property_type(::Type{ ProductVariantUpdateBatch }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductVariantUpdateBatch[name]))}

function check_required(o::ProductVariantUpdateBatch)
    o.payload === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductVariantUpdateBatch }, name::Symbol, val)

    if name === Symbol("nested_items_update_behaviour")
        OpenAPI.validate_param(name, "ProductVariantUpdateBatch", :enum, val, ["replace", "merge"])
    end




    if name === Symbol("payload")
        OpenAPI.validate_param(name, "ProductVariantUpdateBatch", :maxItems, val, 250)
        OpenAPI.validate_param(name, "ProductVariantUpdateBatch", :minItems, val, 1)
    end
end
