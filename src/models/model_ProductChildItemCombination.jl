# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Product_ChildItem_Combination

    ProductChildItemCombination(;
        option_id=nothing,
        option_value_id=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - option_id::String
    - option_value_id::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ProductChildItemCombination <: OpenAPI.APIModel
    option_id::Union{Nothing, String} = nothing
    option_value_id::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ProductChildItemCombination(option_id, option_value_id, additional_fields, custom_fields, )
        OpenAPI.validate_property(ProductChildItemCombination, Symbol("option_id"), option_id)
        OpenAPI.validate_property(ProductChildItemCombination, Symbol("option_value_id"), option_value_id)
        OpenAPI.validate_property(ProductChildItemCombination, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ProductChildItemCombination, Symbol("custom_fields"), custom_fields)
        return new(option_id, option_value_id, additional_fields, custom_fields, )
    end
end # type ProductChildItemCombination

const _property_types_ProductChildItemCombination = Dict{Symbol,String}(Symbol("option_id")=>"String", Symbol("option_value_id")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ProductChildItemCombination }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductChildItemCombination[name]))}

function check_required(o::ProductChildItemCombination)
    true
end

function OpenAPI.validate_property(::Type{ ProductChildItemCombination }, name::Symbol, val)




end
