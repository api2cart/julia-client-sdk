# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PluginList

    PluginList(;
        all_plugins=nothing,
        plugins=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - all_plugins::Int64
    - plugins::Vector{Plugin}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct PluginList <: OpenAPI.APIModel
    all_plugins::Union{Nothing, Int64} = nothing
    plugins::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Plugin} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function PluginList(all_plugins, plugins, additional_fields, custom_fields, )
        OpenAPI.validate_property(PluginList, Symbol("all_plugins"), all_plugins)
        OpenAPI.validate_property(PluginList, Symbol("plugins"), plugins)
        OpenAPI.validate_property(PluginList, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(PluginList, Symbol("custom_fields"), custom_fields)
        return new(all_plugins, plugins, additional_fields, custom_fields, )
    end
end # type PluginList

const _property_types_PluginList = Dict{Symbol,String}(Symbol("all_plugins")=>"Int64", Symbol("plugins")=>"Vector{Plugin}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ PluginList }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PluginList[name]))}

function check_required(o::PluginList)
    true
end

function OpenAPI.validate_property(::Type{ PluginList }, name::Symbol, val)




end
