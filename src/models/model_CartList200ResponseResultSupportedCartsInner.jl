# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CartList_200_response_result_supported_carts_inner

    CartList200ResponseResultSupportedCartsInner(;
        cart_id=nothing,
        cart_name=nothing,
        cart_versions=nothing,
        params=nothing,
    )

    - cart_id::String
    - cart_name::String
    - cart_versions::String
    - params::Vector{String}
"""
Base.@kwdef mutable struct CartList200ResponseResultSupportedCartsInner <: OpenAPI.APIModel
    cart_id::Union{Nothing, String} = nothing
    cart_name::Union{Nothing, String} = nothing
    cart_versions::Union{Nothing, String} = nothing
    params::Union{Nothing, Vector{String}} = nothing

    function CartList200ResponseResultSupportedCartsInner(cart_id, cart_name, cart_versions, params, )
        OpenAPI.validate_property(CartList200ResponseResultSupportedCartsInner, Symbol("cart_id"), cart_id)
        OpenAPI.validate_property(CartList200ResponseResultSupportedCartsInner, Symbol("cart_name"), cart_name)
        OpenAPI.validate_property(CartList200ResponseResultSupportedCartsInner, Symbol("cart_versions"), cart_versions)
        OpenAPI.validate_property(CartList200ResponseResultSupportedCartsInner, Symbol("params"), params)
        return new(cart_id, cart_name, cart_versions, params, )
    end
end # type CartList200ResponseResultSupportedCartsInner

const _property_types_CartList200ResponseResultSupportedCartsInner = Dict{Symbol,String}(Symbol("cart_id")=>"String", Symbol("cart_name")=>"String", Symbol("cart_versions")=>"String", Symbol("params")=>"Vector{String}", )
OpenAPI.property_type(::Type{ CartList200ResponseResultSupportedCartsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CartList200ResponseResultSupportedCartsInner[name]))}

function check_required(o::CartList200ResponseResultSupportedCartsInner)
    true
end

function OpenAPI.validate_property(::Type{ CartList200ResponseResultSupportedCartsInner }, name::Symbol, val)




end
