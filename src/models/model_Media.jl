# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Media

    Media(;
        id=nothing,
        http_path=nothing,
        file_name=nothing,
        type=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - http_path::String
    - file_name::String
    - type::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct Media <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    http_path::Union{Nothing, String} = nothing
    file_name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function Media(id, http_path, file_name, type, additional_fields, custom_fields, )
        OpenAPI.validate_property(Media, Symbol("id"), id)
        OpenAPI.validate_property(Media, Symbol("http_path"), http_path)
        OpenAPI.validate_property(Media, Symbol("file_name"), file_name)
        OpenAPI.validate_property(Media, Symbol("type"), type)
        OpenAPI.validate_property(Media, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(Media, Symbol("custom_fields"), custom_fields)
        return new(id, http_path, file_name, type, additional_fields, custom_fields, )
    end
end # type Media

const _property_types_Media = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("http_path")=>"String", Symbol("file_name")=>"String", Symbol("type")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ Media }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Media[name]))}

function check_required(o::Media)
    true
end

function OpenAPI.validate_property(::Type{ Media }, name::Symbol, val)






end
