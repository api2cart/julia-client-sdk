# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomerUpdate

    CustomerUpdate(;
        id=nothing,
        group_id=nothing,
        group_ids=nothing,
        group=nothing,
        email=nothing,
        phone=nothing,
        first_name=nothing,
        last_name=nothing,
        birth_day=nothing,
        news_letter_subscription=nothing,
        consents=nothing,
        tags=nothing,
        gender=nothing,
        store_id=nothing,
        note=nothing,
        status=nothing,
        address=nothing,
    )

    - id::String : Entity id
    - group_id::String : Customer group_id
    - group_ids::String : Groups that will be assigned to a customer
    - group::String : Defines the group where the customer
    - email::String : Defines customer&#39;s email
    - phone::String : Defines customer&#39;s phone number
    - first_name::String : Defines customer&#39;s first name
    - last_name::String : Defines customer&#39;s last name
    - birth_day::String : Defines customer&#39;s birthday
    - news_letter_subscription::Bool : Defines whether the newsletter subscription is available for the user
    - consents::Vector{CustomerAddConsentsInner} : Defines consents to notifications
    - tags::String : Customer tags
    - gender::String : Defines customer&#39;s gender
    - store_id::String : Store Id
    - note::String : The customer note.
    - status::String : Defines customer&#39;s status
    - address::Vector{CustomerUpdateAddressInner}
"""
Base.@kwdef mutable struct CustomerUpdate <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    group_id::Union{Nothing, String} = nothing
    group_ids::Union{Nothing, String} = nothing
    group::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    phone::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    birth_day::Union{Nothing, String} = nothing
    news_letter_subscription::Union{Nothing, Bool} = nothing
    consents::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomerAddConsentsInner} }
    tags::Union{Nothing, String} = nothing
    gender::Union{Nothing, String} = nothing
    store_id::Union{Nothing, String} = nothing
    note::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing
    address::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomerUpdateAddressInner} }

    function CustomerUpdate(id, group_id, group_ids, group, email, phone, first_name, last_name, birth_day, news_letter_subscription, consents, tags, gender, store_id, note, status, address, )
        OpenAPI.validate_property(CustomerUpdate, Symbol("id"), id)
        OpenAPI.validate_property(CustomerUpdate, Symbol("group_id"), group_id)
        OpenAPI.validate_property(CustomerUpdate, Symbol("group_ids"), group_ids)
        OpenAPI.validate_property(CustomerUpdate, Symbol("group"), group)
        OpenAPI.validate_property(CustomerUpdate, Symbol("email"), email)
        OpenAPI.validate_property(CustomerUpdate, Symbol("phone"), phone)
        OpenAPI.validate_property(CustomerUpdate, Symbol("first_name"), first_name)
        OpenAPI.validate_property(CustomerUpdate, Symbol("last_name"), last_name)
        OpenAPI.validate_property(CustomerUpdate, Symbol("birth_day"), birth_day)
        OpenAPI.validate_property(CustomerUpdate, Symbol("news_letter_subscription"), news_letter_subscription)
        OpenAPI.validate_property(CustomerUpdate, Symbol("consents"), consents)
        OpenAPI.validate_property(CustomerUpdate, Symbol("tags"), tags)
        OpenAPI.validate_property(CustomerUpdate, Symbol("gender"), gender)
        OpenAPI.validate_property(CustomerUpdate, Symbol("store_id"), store_id)
        OpenAPI.validate_property(CustomerUpdate, Symbol("note"), note)
        OpenAPI.validate_property(CustomerUpdate, Symbol("status"), status)
        OpenAPI.validate_property(CustomerUpdate, Symbol("address"), address)
        return new(id, group_id, group_ids, group, email, phone, first_name, last_name, birth_day, news_letter_subscription, consents, tags, gender, store_id, note, status, address, )
    end
end # type CustomerUpdate

const _property_types_CustomerUpdate = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("group_id")=>"String", Symbol("group_ids")=>"String", Symbol("group")=>"String", Symbol("email")=>"String", Symbol("phone")=>"String", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("birth_day")=>"String", Symbol("news_letter_subscription")=>"Bool", Symbol("consents")=>"Vector{CustomerAddConsentsInner}", Symbol("tags")=>"String", Symbol("gender")=>"String", Symbol("store_id")=>"String", Symbol("note")=>"String", Symbol("status")=>"String", Symbol("address")=>"Vector{CustomerUpdateAddressInner}", )
OpenAPI.property_type(::Type{ CustomerUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomerUpdate[name]))}

function check_required(o::CustomerUpdate)
    true
end

function OpenAPI.validate_property(::Type{ CustomerUpdate }, name::Symbol, val)











    if name === Symbol("consents")
        OpenAPI.validate_param(name, "CustomerUpdate", :minItems, val, 1)
    end






end
