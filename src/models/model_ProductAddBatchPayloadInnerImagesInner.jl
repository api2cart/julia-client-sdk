# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAddBatch_payload_inner_images_inner

    ProductAddBatchPayloadInnerImagesInner(;
        type=nothing,
        url=nothing,
        label=nothing,
        name=nothing,
        position=nothing,
    )

    - type::String
    - url::String
    - label::String
    - name::String
    - position::Int64
"""
Base.@kwdef mutable struct ProductAddBatchPayloadInnerImagesInner <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    position::Union{Nothing, Int64} = nothing

    function ProductAddBatchPayloadInnerImagesInner(type, url, label, name, position, )
        OpenAPI.validate_property(ProductAddBatchPayloadInnerImagesInner, Symbol("type"), type)
        OpenAPI.validate_property(ProductAddBatchPayloadInnerImagesInner, Symbol("url"), url)
        OpenAPI.validate_property(ProductAddBatchPayloadInnerImagesInner, Symbol("label"), label)
        OpenAPI.validate_property(ProductAddBatchPayloadInnerImagesInner, Symbol("name"), name)
        OpenAPI.validate_property(ProductAddBatchPayloadInnerImagesInner, Symbol("position"), position)
        return new(type, url, label, name, position, )
    end
end # type ProductAddBatchPayloadInnerImagesInner

const _property_types_ProductAddBatchPayloadInnerImagesInner = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("url")=>"String", Symbol("label")=>"String", Symbol("name")=>"String", Symbol("position")=>"Int64", )
OpenAPI.property_type(::Type{ ProductAddBatchPayloadInnerImagesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddBatchPayloadInnerImagesInner[name]))}

function check_required(o::ProductAddBatchPayloadInnerImagesInner)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddBatchPayloadInnerImagesInner }, name::Symbol, val)





end
