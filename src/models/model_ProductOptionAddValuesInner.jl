# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductOptionAdd_values_inner

    ProductOptionAddValuesInner(;
        value=nothing,
        display_value=nothing,
        is_default=false,
    )

    - value::String
    - display_value::String
    - is_default::Bool
"""
Base.@kwdef mutable struct ProductOptionAddValuesInner <: OpenAPI.APIModel
    value::Union{Nothing, String} = nothing
    display_value::Union{Nothing, String} = nothing
    is_default::Union{Nothing, Bool} = false

    function ProductOptionAddValuesInner(value, display_value, is_default, )
        OpenAPI.validate_property(ProductOptionAddValuesInner, Symbol("value"), value)
        OpenAPI.validate_property(ProductOptionAddValuesInner, Symbol("display_value"), display_value)
        OpenAPI.validate_property(ProductOptionAddValuesInner, Symbol("is_default"), is_default)
        return new(value, display_value, is_default, )
    end
end # type ProductOptionAddValuesInner

const _property_types_ProductOptionAddValuesInner = Dict{Symbol,String}(Symbol("value")=>"String", Symbol("display_value")=>"String", Symbol("is_default")=>"Bool", )
OpenAPI.property_type(::Type{ ProductOptionAddValuesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductOptionAddValuesInner[name]))}

function check_required(o::ProductOptionAddValuesInner)
    o.value === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductOptionAddValuesInner }, name::Symbol, val)

    if name === Symbol("value")
        OpenAPI.validate_param(name, "ProductOptionAddValuesInner", :minLength, val, 1)
    end

    if name === Symbol("display_value")
        OpenAPI.validate_param(name, "ProductOptionAddValuesInner", :minLength, val, 1)
    end

end
