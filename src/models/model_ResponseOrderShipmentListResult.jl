# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Response_Order_Shipment_List_Result

    ResponseOrderShipmentListResult(;
        shipment_count=nothing,
        shipment=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - shipment_count::Int64
    - shipment::Vector{Shipment}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct ResponseOrderShipmentListResult <: OpenAPI.APIModel
    shipment_count::Union{Nothing, Int64} = nothing
    shipment::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Shipment} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function ResponseOrderShipmentListResult(shipment_count, shipment, additional_fields, custom_fields, )
        OpenAPI.validate_property(ResponseOrderShipmentListResult, Symbol("shipment_count"), shipment_count)
        OpenAPI.validate_property(ResponseOrderShipmentListResult, Symbol("shipment"), shipment)
        OpenAPI.validate_property(ResponseOrderShipmentListResult, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(ResponseOrderShipmentListResult, Symbol("custom_fields"), custom_fields)
        return new(shipment_count, shipment, additional_fields, custom_fields, )
    end
end # type ResponseOrderShipmentListResult

const _property_types_ResponseOrderShipmentListResult = Dict{Symbol,String}(Symbol("shipment_count")=>"Int64", Symbol("shipment")=>"Vector{Shipment}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ ResponseOrderShipmentListResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ResponseOrderShipmentListResult[name]))}

function check_required(o::ResponseOrderShipmentListResult)
    true
end

function OpenAPI.validate_property(::Type{ ResponseOrderShipmentListResult }, name::Symbol, val)




end
