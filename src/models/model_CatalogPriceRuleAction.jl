# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CatalogPriceRule_Action

    CatalogPriceRuleAction(;
        scope=nothing,
        apply_to=nothing,
        type=nothing,
        quantity=nothing,
        value=nothing,
        currency_code=nothing,
        include_tax=nothing,
        conditions=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - scope::String
    - apply_to::String
    - type::String
    - quantity::Float64
    - value::Float64
    - currency_code::String
    - include_tax::Bool
    - conditions::Vector{CouponCondition}
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct CatalogPriceRuleAction <: OpenAPI.APIModel
    scope::Union{Nothing, String} = nothing
    apply_to::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    quantity::Union{Nothing, Float64} = nothing
    value::Union{Nothing, Float64} = nothing
    currency_code::Union{Nothing, String} = nothing
    include_tax::Union{Nothing, Bool} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CouponCondition} }
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function CatalogPriceRuleAction(scope, apply_to, type, quantity, value, currency_code, include_tax, conditions, additional_fields, custom_fields, )
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("scope"), scope)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("apply_to"), apply_to)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("type"), type)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("quantity"), quantity)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("value"), value)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("currency_code"), currency_code)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("include_tax"), include_tax)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("conditions"), conditions)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(CatalogPriceRuleAction, Symbol("custom_fields"), custom_fields)
        return new(scope, apply_to, type, quantity, value, currency_code, include_tax, conditions, additional_fields, custom_fields, )
    end
end # type CatalogPriceRuleAction

const _property_types_CatalogPriceRuleAction = Dict{Symbol,String}(Symbol("scope")=>"String", Symbol("apply_to")=>"String", Symbol("type")=>"String", Symbol("quantity")=>"Float64", Symbol("value")=>"Float64", Symbol("currency_code")=>"String", Symbol("include_tax")=>"Bool", Symbol("conditions")=>"Vector{CouponCondition}", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ CatalogPriceRuleAction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CatalogPriceRuleAction[name]))}

function check_required(o::CatalogPriceRuleAction)
    true
end

function OpenAPI.validate_property(::Type{ CatalogPriceRuleAction }, name::Symbol, val)










end
