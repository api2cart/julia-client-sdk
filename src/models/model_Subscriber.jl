# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Subscriber

    Subscriber(;
        id=nothing,
        customer_id=nothing,
        email=nothing,
        subscribed=nothing,
        first_name=nothing,
        last_name=nothing,
        stores_ids=nothing,
        created_time=nothing,
        modified_time=nothing,
        lang_id=nothing,
        gender=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - id::String
    - customer_id::String
    - email::String
    - subscribed::Bool
    - first_name::String
    - last_name::String
    - stores_ids::Vector{String}
    - created_time::String
    - modified_time::String
    - lang_id::String
    - gender::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct Subscriber <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    customer_id::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    subscribed::Union{Nothing, Bool} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    stores_ids::Union{Nothing, Vector{String}} = nothing
    created_time::Union{Nothing, String} = nothing
    modified_time::Union{Nothing, String} = nothing
    lang_id::Union{Nothing, String} = nothing
    gender::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function Subscriber(id, customer_id, email, subscribed, first_name, last_name, stores_ids, created_time, modified_time, lang_id, gender, additional_fields, custom_fields, )
        OpenAPI.validate_property(Subscriber, Symbol("id"), id)
        OpenAPI.validate_property(Subscriber, Symbol("customer_id"), customer_id)
        OpenAPI.validate_property(Subscriber, Symbol("email"), email)
        OpenAPI.validate_property(Subscriber, Symbol("subscribed"), subscribed)
        OpenAPI.validate_property(Subscriber, Symbol("first_name"), first_name)
        OpenAPI.validate_property(Subscriber, Symbol("last_name"), last_name)
        OpenAPI.validate_property(Subscriber, Symbol("stores_ids"), stores_ids)
        OpenAPI.validate_property(Subscriber, Symbol("created_time"), created_time)
        OpenAPI.validate_property(Subscriber, Symbol("modified_time"), modified_time)
        OpenAPI.validate_property(Subscriber, Symbol("lang_id"), lang_id)
        OpenAPI.validate_property(Subscriber, Symbol("gender"), gender)
        OpenAPI.validate_property(Subscriber, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(Subscriber, Symbol("custom_fields"), custom_fields)
        return new(id, customer_id, email, subscribed, first_name, last_name, stores_ids, created_time, modified_time, lang_id, gender, additional_fields, custom_fields, )
    end
end # type Subscriber

const _property_types_Subscriber = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("customer_id")=>"String", Symbol("email")=>"String", Symbol("subscribed")=>"Bool", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("stores_ids")=>"Vector{String}", Symbol("created_time")=>"String", Symbol("modified_time")=>"String", Symbol("lang_id")=>"String", Symbol("gender")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ Subscriber }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Subscriber[name]))}

function check_required(o::Subscriber)
    true
end

function OpenAPI.validate_property(::Type{ Subscriber }, name::Symbol, val)













end
