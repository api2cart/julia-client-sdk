# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Country

    Country(;
        code2=nothing,
        code3=nothing,
        name=nothing,
        additional_fields=nothing,
        custom_fields=nothing,
    )

    - code2::String
    - code3::String
    - name::String
    - additional_fields::Any
    - custom_fields::Any
"""
Base.@kwdef mutable struct Country <: OpenAPI.APIModel
    code2::Union{Nothing, String} = nothing
    code3::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    additional_fields::Union{Nothing, Any} = nothing
    custom_fields::Union{Nothing, Any} = nothing

    function Country(code2, code3, name, additional_fields, custom_fields, )
        OpenAPI.validate_property(Country, Symbol("code2"), code2)
        OpenAPI.validate_property(Country, Symbol("code3"), code3)
        OpenAPI.validate_property(Country, Symbol("name"), name)
        OpenAPI.validate_property(Country, Symbol("additional_fields"), additional_fields)
        OpenAPI.validate_property(Country, Symbol("custom_fields"), custom_fields)
        return new(code2, code3, name, additional_fields, custom_fields, )
    end
end # type Country

const _property_types_Country = Dict{Symbol,String}(Symbol("code2")=>"String", Symbol("code3")=>"String", Symbol("name")=>"String", Symbol("additional_fields")=>"Any", Symbol("custom_fields")=>"Any", )
OpenAPI.property_type(::Type{ Country }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Country[name]))}

function check_required(o::Country)
    true
end

function OpenAPI.validate_property(::Type{ Country }, name::Symbol, val)





end
