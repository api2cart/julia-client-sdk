# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CartPluginList_200_response_result

    CartPluginList200ResponseResult(;
        all_plugins=nothing,
        plugins=nothing,
    )

    - all_plugins::Int64
    - plugins::Vector{PluginList}
"""
Base.@kwdef mutable struct CartPluginList200ResponseResult <: OpenAPI.APIModel
    all_plugins::Union{Nothing, Int64} = nothing
    plugins::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PluginList} }

    function CartPluginList200ResponseResult(all_plugins, plugins, )
        OpenAPI.validate_property(CartPluginList200ResponseResult, Symbol("all_plugins"), all_plugins)
        OpenAPI.validate_property(CartPluginList200ResponseResult, Symbol("plugins"), plugins)
        return new(all_plugins, plugins, )
    end
end # type CartPluginList200ResponseResult

const _property_types_CartPluginList200ResponseResult = Dict{Symbol,String}(Symbol("all_plugins")=>"Int64", Symbol("plugins")=>"Vector{PluginList}", )
OpenAPI.property_type(::Type{ CartPluginList200ResponseResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CartPluginList200ResponseResult[name]))}

function check_required(o::CartPluginList200ResponseResult)
    true
end

function OpenAPI.validate_property(::Type{ CartPluginList200ResponseResult }, name::Symbol, val)


end
