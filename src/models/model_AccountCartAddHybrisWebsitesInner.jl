# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AccountCartAdd_hybris_websites_inner

    AccountCartAddHybrisWebsitesInner(;
        uid=nothing,
        url=nothing,
        storeIds=nothing,
    )

    - uid::String
    - url::String
    - storeIds::Vector{String}
"""
Base.@kwdef mutable struct AccountCartAddHybrisWebsitesInner <: OpenAPI.APIModel
    uid::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    storeIds::Union{Nothing, Vector{String}} = nothing

    function AccountCartAddHybrisWebsitesInner(uid, url, storeIds, )
        OpenAPI.validate_property(AccountCartAddHybrisWebsitesInner, Symbol("uid"), uid)
        OpenAPI.validate_property(AccountCartAddHybrisWebsitesInner, Symbol("url"), url)
        OpenAPI.validate_property(AccountCartAddHybrisWebsitesInner, Symbol("storeIds"), storeIds)
        return new(uid, url, storeIds, )
    end
end # type AccountCartAddHybrisWebsitesInner

const _property_types_AccountCartAddHybrisWebsitesInner = Dict{Symbol,String}(Symbol("uid")=>"String", Symbol("url")=>"String", Symbol("storeIds")=>"Vector{String}", )
OpenAPI.property_type(::Type{ AccountCartAddHybrisWebsitesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AccountCartAddHybrisWebsitesInner[name]))}

function check_required(o::AccountCartAddHybrisWebsitesInner)
    o.uid === nothing && (return false)
    o.url === nothing && (return false)
    o.storeIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AccountCartAddHybrisWebsitesInner }, name::Symbol, val)



    if name === Symbol("storeIds")
        OpenAPI.validate_param(name, "AccountCartAddHybrisWebsitesInner", :minItems, val, 1)
    end
end
