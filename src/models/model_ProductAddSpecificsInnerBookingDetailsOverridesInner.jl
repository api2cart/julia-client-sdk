# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductAdd_specifics_inner_booking_details_overrides_inner

    ProductAddSpecificsInnerBookingDetailsOverridesInner(;
        day=nothing,
        date=nothing,
    )

    - day::String
    - date::String
"""
Base.@kwdef mutable struct ProductAddSpecificsInnerBookingDetailsOverridesInner <: OpenAPI.APIModel
    day::Union{Nothing, String} = nothing
    date::Union{Nothing, String} = nothing

    function ProductAddSpecificsInnerBookingDetailsOverridesInner(day, date, )
        OpenAPI.validate_property(ProductAddSpecificsInnerBookingDetailsOverridesInner, Symbol("day"), day)
        OpenAPI.validate_property(ProductAddSpecificsInnerBookingDetailsOverridesInner, Symbol("date"), date)
        return new(day, date, )
    end
end # type ProductAddSpecificsInnerBookingDetailsOverridesInner

const _property_types_ProductAddSpecificsInnerBookingDetailsOverridesInner = Dict{Symbol,String}(Symbol("day")=>"String", Symbol("date")=>"String", )
OpenAPI.property_type(::Type{ ProductAddSpecificsInnerBookingDetailsOverridesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductAddSpecificsInnerBookingDetailsOverridesInner[name]))}

function check_required(o::ProductAddSpecificsInnerBookingDetailsOverridesInner)
    o.day === nothing && (return false)
    o.date === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProductAddSpecificsInnerBookingDetailsOverridesInner }, name::Symbol, val)

    if name === Symbol("day")
        OpenAPI.validate_param(name, "ProductAddSpecificsInnerBookingDetailsOverridesInner", :enum, val, ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"])
    end


    if name === Symbol("date")
        OpenAPI.validate_param(name, "ProductAddSpecificsInnerBookingDetailsOverridesInner", :pattern, val, r"^(19|20)\d\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$")
    end
end
