# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CartCouponAdd

    CartCouponAdd(;
        code=nothing,
        action_type=nothing,
        action_apply_to=nothing,
        action_scope=nothing,
        action_amount=nothing,
        codes=nothing,
        name=nothing,
        date_start="now",
        date_end=nothing,
        usage_limit=nothing,
        usage_limit_per_customer=nothing,
        action_condition_entity=nothing,
        action_condition_key=nothing,
        action_condition_operator=nothing,
        action_condition_value=nothing,
        include_tax=false,
        store_id=nothing,
        free_cash_on_delivery=nothing,
        customer_id=nothing,
    )

    - code::String : Coupon code
    - action_type::String : Coupon discount type
    - action_apply_to::String : Defines where discount should be applied
    - action_scope::String : Specify how discount should be applied. If scope&#x3D;matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
    - action_amount::Float64 : Defines the discount amount value.
    - codes::Vector{String} : Entity codes
    - name::String : Coupon name
    - date_start::String : Date start
    - date_end::String : Defines when discount code will be expired.
    - usage_limit::Int64 : Usage limit for coupon.
    - usage_limit_per_customer::Int64 : Usage limit per customer.
    - action_condition_entity::String : Defines entity for action condition.
    - action_condition_key::String : Defines entity attribute code for action condition.
    - action_condition_operator::String : Defines condition operator.
    - action_condition_value::String : Defines condition attribute value/s. Can be comma separated string.
    - include_tax::Bool : Indicates whether to apply a discount for taxes.
    - store_id::String : Store Id
    - free_cash_on_delivery::Bool : Defines whether the coupon provides free cash on delivery
    - customer_id::String : Retrieves orders specified by customer id
"""
Base.@kwdef mutable struct CartCouponAdd <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    action_type::Union{Nothing, String} = nothing
    action_apply_to::Union{Nothing, String} = nothing
    action_scope::Union{Nothing, String} = nothing
    action_amount::Union{Nothing, Float64} = nothing
    codes::Union{Nothing, Vector{String}} = nothing
    name::Union{Nothing, String} = nothing
    date_start::Union{Nothing, String} = "now"
    date_end::Union{Nothing, String} = nothing
    usage_limit::Union{Nothing, Int64} = nothing
    usage_limit_per_customer::Union{Nothing, Int64} = nothing
    action_condition_entity::Union{Nothing, String} = nothing
    action_condition_key::Union{Nothing, String} = nothing
    action_condition_operator::Union{Nothing, String} = nothing
    action_condition_value::Union{Nothing, String} = nothing
    include_tax::Union{Nothing, Bool} = false
    store_id::Union{Nothing, String} = nothing
    free_cash_on_delivery::Union{Nothing, Bool} = nothing
    customer_id::Union{Nothing, String} = nothing

    function CartCouponAdd(code, action_type, action_apply_to, action_scope, action_amount, codes, name, date_start, date_end, usage_limit, usage_limit_per_customer, action_condition_entity, action_condition_key, action_condition_operator, action_condition_value, include_tax, store_id, free_cash_on_delivery, customer_id, )
        OpenAPI.validate_property(CartCouponAdd, Symbol("code"), code)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_type"), action_type)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_apply_to"), action_apply_to)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_scope"), action_scope)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_amount"), action_amount)
        OpenAPI.validate_property(CartCouponAdd, Symbol("codes"), codes)
        OpenAPI.validate_property(CartCouponAdd, Symbol("name"), name)
        OpenAPI.validate_property(CartCouponAdd, Symbol("date_start"), date_start)
        OpenAPI.validate_property(CartCouponAdd, Symbol("date_end"), date_end)
        OpenAPI.validate_property(CartCouponAdd, Symbol("usage_limit"), usage_limit)
        OpenAPI.validate_property(CartCouponAdd, Symbol("usage_limit_per_customer"), usage_limit_per_customer)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_condition_entity"), action_condition_entity)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_condition_key"), action_condition_key)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_condition_operator"), action_condition_operator)
        OpenAPI.validate_property(CartCouponAdd, Symbol("action_condition_value"), action_condition_value)
        OpenAPI.validate_property(CartCouponAdd, Symbol("include_tax"), include_tax)
        OpenAPI.validate_property(CartCouponAdd, Symbol("store_id"), store_id)
        OpenAPI.validate_property(CartCouponAdd, Symbol("free_cash_on_delivery"), free_cash_on_delivery)
        OpenAPI.validate_property(CartCouponAdd, Symbol("customer_id"), customer_id)
        return new(code, action_type, action_apply_to, action_scope, action_amount, codes, name, date_start, date_end, usage_limit, usage_limit_per_customer, action_condition_entity, action_condition_key, action_condition_operator, action_condition_value, include_tax, store_id, free_cash_on_delivery, customer_id, )
    end
end # type CartCouponAdd

const _property_types_CartCouponAdd = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("action_type")=>"String", Symbol("action_apply_to")=>"String", Symbol("action_scope")=>"String", Symbol("action_amount")=>"Float64", Symbol("codes")=>"Vector{String}", Symbol("name")=>"String", Symbol("date_start")=>"String", Symbol("date_end")=>"String", Symbol("usage_limit")=>"Int64", Symbol("usage_limit_per_customer")=>"Int64", Symbol("action_condition_entity")=>"String", Symbol("action_condition_key")=>"String", Symbol("action_condition_operator")=>"String", Symbol("action_condition_value")=>"String", Symbol("include_tax")=>"Bool", Symbol("store_id")=>"String", Symbol("free_cash_on_delivery")=>"Bool", Symbol("customer_id")=>"String", )
OpenAPI.property_type(::Type{ CartCouponAdd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CartCouponAdd[name]))}

function check_required(o::CartCouponAdd)
    o.code === nothing && (return false)
    o.action_type === nothing && (return false)
    o.action_apply_to === nothing && (return false)
    o.action_scope === nothing && (return false)
    o.action_amount === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CartCouponAdd }, name::Symbol, val)


    if name === Symbol("action_type")
        OpenAPI.validate_param(name, "CartCouponAdd", :enum, val, ["percent", "fixed"])
    end


    if name === Symbol("action_apply_to")
        OpenAPI.validate_param(name, "CartCouponAdd", :enum, val, ["order_total", "item_price", "shipping"])
    end


    if name === Symbol("action_scope")
        OpenAPI.validate_param(name, "CartCouponAdd", :enum, val, ["order", "matching_items"])
    end
















end
