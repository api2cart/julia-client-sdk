# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AttributeApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AttributeApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AttributeApi }) = "https://api.api2cart.com/v1.1"

const _returntypes_attribute_add_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeAdd200Response,
)

function _oacinternal_attribute_add(_api::AttributeApi, type::String, name::String; code=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, position=nothing, attribute_group_id=nothing, is_global=nothing, is_searchable=nothing, is_filterable=nothing, is_comparable=nothing, is_html_allowed_on_front=nothing, is_filterable_in_search=nothing, is_configurable=nothing, is_visible_in_advanced_search=nothing, is_used_for_promo_rules=nothing, used_in_product_listing=nothing, used_for_sort_by=nothing, apply_to=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_add_AttributeApi, "/attribute.add.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "type", type; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "code", code; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "visible", visible; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "required", required; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "position", position; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "attribute_group_id", attribute_group_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "is_global", is_global; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "is_searchable", is_searchable; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_filterable", is_filterable; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "is_comparable", is_comparable; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_html_allowed_on_front", is_html_allowed_on_front; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_filterable_in_search", is_filterable_in_search; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_configurable", is_configurable; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_visible_in_advanced_search", is_visible_in_advanced_search; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "is_used_for_promo_rules", is_used_for_promo_rules; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "used_in_product_listing", used_in_product_listing; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "used_for_sort_by", used_for_sort_by; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "apply_to", apply_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.add

Add new attribute

Params:
- type::String (required)
- name::String (required)
- code::String
- store_id::String
- lang_id::String
- visible::Bool
- required::Bool
- position::Int64
- attribute_group_id::String
- is_global::String
- is_searchable::Bool
- is_filterable::String
- is_comparable::Bool
- is_html_allowed_on_front::Bool
- is_filterable_in_search::Bool
- is_configurable::Bool
- is_visible_in_advanced_search::Bool
- is_used_for_promo_rules::Bool
- used_in_product_listing::Bool
- used_for_sort_by::Bool
- apply_to::String

Return: AttributeAdd200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_add(_api::AttributeApi, type::String, name::String; code=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, position=nothing, attribute_group_id=nothing, is_global=nothing, is_searchable=nothing, is_filterable=nothing, is_comparable=nothing, is_html_allowed_on_front=nothing, is_filterable_in_search=nothing, is_configurable=nothing, is_visible_in_advanced_search=nothing, is_used_for_promo_rules=nothing, used_in_product_listing=nothing, used_for_sort_by=nothing, apply_to=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_add(_api, type, name; code=code, store_id=store_id, lang_id=lang_id, visible=visible, required=required, position=position, attribute_group_id=attribute_group_id, is_global=is_global, is_searchable=is_searchable, is_filterable=is_filterable, is_comparable=is_comparable, is_html_allowed_on_front=is_html_allowed_on_front, is_filterable_in_search=is_filterable_in_search, is_configurable=is_configurable, is_visible_in_advanced_search=is_visible_in_advanced_search, is_used_for_promo_rules=is_used_for_promo_rules, used_in_product_listing=used_in_product_listing, used_for_sort_by=used_for_sort_by, apply_to=apply_to, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_add(_api::AttributeApi, response_stream::Channel, type::String, name::String; code=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, position=nothing, attribute_group_id=nothing, is_global=nothing, is_searchable=nothing, is_filterable=nothing, is_comparable=nothing, is_html_allowed_on_front=nothing, is_filterable_in_search=nothing, is_configurable=nothing, is_visible_in_advanced_search=nothing, is_used_for_promo_rules=nothing, used_in_product_listing=nothing, used_for_sort_by=nothing, apply_to=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_add(_api, type, name; code=code, store_id=store_id, lang_id=lang_id, visible=visible, required=required, position=position, attribute_group_id=attribute_group_id, is_global=is_global, is_searchable=is_searchable, is_filterable=is_filterable, is_comparable=is_comparable, is_html_allowed_on_front=is_html_allowed_on_front, is_filterable_in_search=is_filterable_in_search, is_configurable=is_configurable, is_visible_in_advanced_search=is_visible_in_advanced_search, is_used_for_promo_rules=is_used_for_promo_rules, used_in_product_listing=used_in_product_listing, used_for_sort_by=used_for_sort_by, apply_to=apply_to, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_assign_group_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeAssignGroup200Response,
)

function _oacinternal_attribute_assign_group(_api::AttributeApi, id::String, group_id::String; attribute_set_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_assign_group_AttributeApi, "/attribute.assign.group.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group_id", group_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.assign.group

Assign attribute to the group

Params:
- id::String (required)
- group_id::String (required)
- attribute_set_id::String

Return: AttributeAssignGroup200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_assign_group(_api::AttributeApi, id::String, group_id::String; attribute_set_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_assign_group(_api, id, group_id; attribute_set_id=attribute_set_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_assign_group(_api::AttributeApi, response_stream::Channel, id::String, group_id::String; attribute_set_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_assign_group(_api, id, group_id; attribute_set_id=attribute_set_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_assign_set_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeAssignGroup200Response,
)

function _oacinternal_attribute_assign_set(_api::AttributeApi, id::String, attribute_set_id::String; group_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_assign_set_AttributeApi, "/attribute.assign.set.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group_id", group_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.assign.set

Assign attribute to the attribute set

Params:
- id::String (required)
- attribute_set_id::String (required)
- group_id::String

Return: AttributeAssignGroup200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_assign_set(_api::AttributeApi, id::String, attribute_set_id::String; group_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_assign_set(_api, id, attribute_set_id; group_id=group_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_assign_set(_api::AttributeApi, response_stream::Channel, id::String, attribute_set_id::String; group_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_assign_set(_api, id, attribute_set_id; group_id=group_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_attributeset_list_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseAttributeAttributesetList,
)

function _oacinternal_attribute_attributeset_list(_api::AttributeApi; start=nothing, count=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_attributeset_list_AttributeApi, "/attribute.attributeset.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.attributeset.list

Get attribute_set list

Params:
- start::Int64
- count::Int64
- params::String
- exclude::String
- response_fields::String

Return: ModelResponseAttributeAttributesetList, OpenAPI.Clients.ApiResponse
"""
function attribute_attributeset_list(_api::AttributeApi; start=nothing, count=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_attributeset_list(_api; start=start, count=count, params=params, exclude=exclude, response_fields=response_fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_attributeset_list(_api::AttributeApi, response_stream::Channel; start=nothing, count=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_attributeset_list(_api; start=start, count=count, params=params, exclude=exclude, response_fields=response_fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_count_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeCount200Response,
)

function _oacinternal_attribute_count(_api::AttributeApi; type=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_count_AttributeApi, "/attribute.count.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "type", type; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "visible", visible; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "required", required; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "system", system; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.count

Get attributes count

Params:
- type::String
- attribute_set_id::String
- store_id::String
- lang_id::String
- visible::Bool
- required::Bool
- system::Bool

Return: AttributeCount200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_count(_api::AttributeApi; type=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_count(_api; type=type, attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, visible=visible, required=required, system=system, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_count(_api::AttributeApi, response_stream::Channel; type=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_count(_api; type=type, attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, visible=visible, required=required, system=system, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_delete_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeDelete200Response,
)

function _oacinternal_attribute_delete(_api::AttributeApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_attribute_delete_AttributeApi, "/attribute.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.delete

Delete attribute from store

Params:
- id::String (required)
- store_id::String

Return: AttributeDelete200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_delete(_api::AttributeApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_delete(_api::AttributeApi, response_stream::Channel, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_group_list_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseAttributeGroupList,
)

function _oacinternal_attribute_group_list(_api::AttributeApi; start=nothing, count=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, attribute_set_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_group_list_AttributeApi, "/attribute.group.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.group.list

Get attribute group list

Params:
- start::Int64
- count::Int64
- lang_id::String
- params::String
- exclude::String
- response_fields::String
- attribute_set_id::String

Return: ModelResponseAttributeGroupList, OpenAPI.Clients.ApiResponse
"""
function attribute_group_list(_api::AttributeApi; start=nothing, count=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, attribute_set_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_group_list(_api; start=start, count=count, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, attribute_set_id=attribute_set_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_group_list(_api::AttributeApi, response_stream::Channel; start=nothing, count=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, attribute_set_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_group_list(_api; start=start, count=count, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, attribute_set_id=attribute_set_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_info_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeInfo200Response,
)

function _oacinternal_attribute_info(_api::AttributeApi, id::String; attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_info_AttributeApi, "/attribute.info.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.info

Get information about a specific global attribute by its ID.

Params:
- id::String (required)
- attribute_set_id::String
- store_id::String
- lang_id::String
- params::String
- exclude::String
- response_fields::String

Return: AttributeInfo200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_info(_api::AttributeApi, id::String; attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_info(_api, id; attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_info(_api::AttributeApi, response_stream::Channel, id::String; attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_info(_api, id; attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_list_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseAttributeList,
)

function _oacinternal_attribute_list(_api::AttributeApi; start=nothing, count=nothing, type=nothing, attribute_ids=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_list_AttributeApi, "/attribute.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "type", type; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_ids", attribute_ids; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "visible", visible; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "required", required; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "system", system; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.list

Get a list of global attributes.

Params:
- start::Int64
- count::Int64
- type::String
- attribute_ids::String
- attribute_set_id::String
- store_id::String
- lang_id::String
- params::String
- exclude::String
- response_fields::String
- visible::Bool
- required::Bool
- system::Bool

Return: ModelResponseAttributeList, OpenAPI.Clients.ApiResponse
"""
function attribute_list(_api::AttributeApi; start=nothing, count=nothing, type=nothing, attribute_ids=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_list(_api; start=start, count=count, type=type, attribute_ids=attribute_ids, attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, visible=visible, required=required, system=system, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_list(_api::AttributeApi, response_stream::Channel; start=nothing, count=nothing, type=nothing, attribute_ids=nothing, attribute_set_id=nothing, store_id=nothing, lang_id=nothing, params=nothing, exclude=nothing, response_fields=nothing, visible=nothing, required=nothing, system=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_list(_api; start=start, count=count, type=type, attribute_ids=attribute_ids, attribute_set_id=attribute_set_id, store_id=store_id, lang_id=lang_id, params=params, exclude=exclude, response_fields=response_fields, visible=visible, required=required, system=system, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_type_list_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeTypeList200Response,
)

function _oacinternal_attribute_type_list(_api::AttributeApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_attribute_type_list_AttributeApi, "/attribute.type.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.type.list

Get list of supported attributes types

Params:

Return: AttributeTypeList200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_type_list(_api::AttributeApi; _mediaType=nothing)
    _ctx = _oacinternal_attribute_type_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_type_list(_api::AttributeApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_attribute_type_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_unassign_group_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeUnassignGroup200Response,
)

function _oacinternal_attribute_unassign_group(_api::AttributeApi, id::String, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_unassign_group_AttributeApi, "/attribute.unassign.group.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group_id", group_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.unassign.group

Unassign attribute from group

Params:
- id::String (required)
- group_id::String (required)

Return: AttributeUnassignGroup200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_unassign_group(_api::AttributeApi, id::String, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_attribute_unassign_group(_api, id, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_unassign_group(_api::AttributeApi, response_stream::Channel, id::String, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_attribute_unassign_group(_api, id, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_unassign_set_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeUnassignGroup200Response,
)

function _oacinternal_attribute_unassign_set(_api::AttributeApi, id::String, attribute_set_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_unassign_set_AttributeApi, "/attribute.unassign.set.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_set_id", attribute_set_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.unassign.set

Unassign attribute from attribute set

Params:
- id::String (required)
- attribute_set_id::String (required)

Return: AttributeUnassignGroup200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_unassign_set(_api::AttributeApi, id::String, attribute_set_id::String; _mediaType=nothing)
    _ctx = _oacinternal_attribute_unassign_set(_api, id, attribute_set_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_unassign_set(_api::AttributeApi, response_stream::Channel, id::String, attribute_set_id::String; _mediaType=nothing)
    _ctx = _oacinternal_attribute_unassign_set(_api, id, attribute_set_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_update_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeUpdate200Response,
)

function _oacinternal_attribute_update(_api::AttributeApi, id::String, name::String; store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_attribute_update_AttributeApi, "/attribute.update.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.update

Update attribute data

Params:
- id::String (required)
- name::String (required)
- store_id::String
- lang_id::String

Return: AttributeUpdate200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_update(_api::AttributeApi, id::String, name::String; store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_update(_api, id, name; store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_update(_api::AttributeApi, response_stream::Channel, id::String, name::String; store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_update(_api, id, name; store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_value_add_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeAdd200Response,
)

function _oacinternal_attribute_value_add(_api::AttributeApi, attribute_id::String, name::String; code=nothing, description=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_attribute_value_add_AttributeApi, "/attribute.value.add.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "attribute_id", attribute_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "code", code; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "description", description; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.value.add

Add new value to attribute.

Params:
- attribute_id::String (required)
- name::String (required)
- code::String
- description::String
- store_id::String
- lang_id::String

Return: AttributeAdd200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_value_add(_api::AttributeApi, attribute_id::String, name::String; code=nothing, description=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_add(_api, attribute_id, name; code=code, description=description, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_value_add(_api::AttributeApi, response_stream::Channel, attribute_id::String, name::String; code=nothing, description=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_add(_api, attribute_id, name; code=code, description=description, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_value_delete_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeValueDelete200Response,
)

function _oacinternal_attribute_value_delete(_api::AttributeApi, id::String, attribute_id::String; store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_attribute_value_delete_AttributeApi, "/attribute.value.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_id", attribute_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.value.delete

Delete attribute value.

Params:
- id::String (required)
- attribute_id::String (required)
- store_id::String

Return: AttributeValueDelete200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_value_delete(_api::AttributeApi, id::String, attribute_id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_delete(_api, id, attribute_id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_value_delete(_api::AttributeApi, response_stream::Channel, id::String, attribute_id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_delete(_api, id, attribute_id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_attribute_value_update_AttributeApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeUpdate200Response,
)

function _oacinternal_attribute_value_update(_api::AttributeApi, id::String, attribute_id::String; name=nothing, description=nothing, code=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_attribute_value_update_AttributeApi, "/attribute.value.update.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "attribute_id", attribute_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "description", description; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "code", code; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""attribute.value.update

Update attribute value.

Params:
- id::String (required)
- attribute_id::String (required)
- name::String
- description::String
- code::String
- store_id::String
- lang_id::String

Return: AttributeUpdate200Response, OpenAPI.Clients.ApiResponse
"""
function attribute_value_update(_api::AttributeApi, id::String, attribute_id::String; name=nothing, description=nothing, code=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_update(_api, id, attribute_id; name=name, description=description, code=code, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function attribute_value_update(_api::AttributeApi, response_stream::Channel, id::String, attribute_id::String; name=nothing, description=nothing, code=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_attribute_value_update(_api, id, attribute_id; name=name, description=description, code=code, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export attribute_add
export attribute_assign_group
export attribute_assign_set
export attribute_attributeset_list
export attribute_count
export attribute_delete
export attribute_group_list
export attribute_info
export attribute_list
export attribute_type_list
export attribute_unassign_group
export attribute_unassign_set
export attribute_update
export attribute_value_add
export attribute_value_delete
export attribute_value_update
