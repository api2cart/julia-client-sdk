# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CartApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CartApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CartApi }) = "https://api.api2cart.local.com/v1.1"

const _returntypes_cart_catalog_price_rules_count_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartCatalogPriceRulesCount200Response,
)

function _oacinternal_cart_catalog_price_rules_count(_api::CartApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_catalog_price_rules_count_CartApi, "/cart.catalog_price_rules.count.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.catalog_price_rules.count

Get count of cart catalog price rules discounts.

Params:

Return: CartCatalogPriceRulesCount200Response, OpenAPI.Clients.ApiResponse
"""
function cart_catalog_price_rules_count(_api::CartApi; _mediaType=nothing)
    _ctx = _oacinternal_cart_catalog_price_rules_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_catalog_price_rules_count(_api::CartApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_cart_catalog_price_rules_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_catalog_price_rules_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartCatalogPriceRulesList,
)

function _oacinternal_cart_catalog_price_rules_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, ids=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_catalog_price_rules_list_CartApi, "/cart.catalog_price_rules.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_cursor", page_cursor; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.catalog_price_rules.list

Get cart catalog price rules discounts.

Params:
- start::Int64
- count::Int64
- page_cursor::String
- ids::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartCatalogPriceRulesList, OpenAPI.Clients.ApiResponse
"""
function cart_catalog_price_rules_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, ids=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_catalog_price_rules_list(_api; start=start, count=count, page_cursor=page_cursor, ids=ids, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_catalog_price_rules_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, page_cursor=nothing, ids=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_catalog_price_rules_list(_api; start=start, count=count, page_cursor=page_cursor, ids=ids, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_coupon_add_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartCouponAdd200Response,
)

function _oacinternal_cart_coupon_add(_api::CartApi, cart_coupon_add_param::CartCouponAdd; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cart_coupon_add_CartApi, "/cart.coupon.add.json", ["StoreKeyAuth", "ApiKeyAuth", ], cart_coupon_add_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""cart.coupon.add

Use this method to create a coupon with specified conditions.

Params:
- cart_coupon_add_param::CartCouponAdd (required)

Return: CartCouponAdd200Response, OpenAPI.Clients.ApiResponse
"""
function cart_coupon_add(_api::CartApi, cart_coupon_add_param::CartCouponAdd; _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_add(_api, cart_coupon_add_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_coupon_add(_api::CartApi, response_stream::Channel, cart_coupon_add_param::CartCouponAdd; _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_add(_api, cart_coupon_add_param; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_coupon_condition_add_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BasketLiveShippingServiceDelete200Response,
)

function _oacinternal_cart_coupon_condition_add(_api::CartApi, coupon_id::String, entity::String, key::String, operator::String, value::String; target=nothing, include_tax=nothing, include_shipping=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cart_coupon_condition_add_CartApi, "/cart.coupon.condition.add.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "coupon_id", coupon_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity", entity; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "key", key; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "operator", operator; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "value", value; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "target", target; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_tax", include_tax; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "include_shipping", include_shipping; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.coupon.condition.add

Use this method to add additional conditions for coupon application.

Params:
- coupon_id::String (required)
- entity::String (required)
- key::String (required)
- operator::String (required)
- value::String (required)
- target::String
- include_tax::Bool
- include_shipping::Bool
- store_id::String

Return: BasketLiveShippingServiceDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_coupon_condition_add(_api::CartApi, coupon_id::String, entity::String, key::String, operator::String, value::String; target=nothing, include_tax=nothing, include_shipping=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_condition_add(_api, coupon_id, entity, key, operator, value; target=target, include_tax=include_tax, include_shipping=include_shipping, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_coupon_condition_add(_api::CartApi, response_stream::Channel, coupon_id::String, entity::String, key::String, operator::String, value::String; target=nothing, include_tax=nothing, include_shipping=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_condition_add(_api, coupon_id, entity, key, operator, value; target=target, include_tax=include_tax, include_shipping=include_shipping, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_coupon_count_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartCouponCount200Response,
)

function _oacinternal_cart_coupon_count(_api::CartApi; store_id=nothing, avail=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_coupon_count_CartApi, "/cart.coupon.count.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "avail", avail; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "date_start_from", date_start_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_start_to", date_start_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_end_from", date_end_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_end_to", date_end_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.coupon.count

This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.

Params:
- store_id::String
- avail::Bool
- date_start_from::String
- date_start_to::String
- date_end_from::String
- date_end_to::String

Return: CartCouponCount200Response, OpenAPI.Clients.ApiResponse
"""
function cart_coupon_count(_api::CartApi; store_id=nothing, avail=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_count(_api; store_id=store_id, avail=avail, date_start_from=date_start_from, date_start_to=date_start_to, date_end_from=date_end_from, date_end_to=date_end_to, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_coupon_count(_api::CartApi, response_stream::Channel; store_id=nothing, avail=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_count(_api; store_id=store_id, avail=avail, date_start_from=date_start_from, date_start_to=date_start_to, date_end_from=date_end_from, date_end_to=date_end_to, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_coupon_delete_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeDelete200Response,
)

function _oacinternal_cart_coupon_delete(_api::CartApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cart_coupon_delete_CartApi, "/cart.coupon.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.coupon.delete

Delete coupon

Params:
- id::String (required)
- store_id::String

Return: AttributeDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_coupon_delete(_api::CartApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_coupon_delete(_api::CartApi, response_stream::Channel, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_coupon_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartCouponList,
)

function _oacinternal_cart_coupon_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, coupons_ids=nothing, store_id=nothing, lang_id=nothing, avail=nothing, status=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_coupon_list_CartApi, "/cart.coupon.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_cursor", page_cursor; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "coupons_ids", coupons_ids; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "avail", avail; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_start_from", date_start_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_start_to", date_start_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_end_from", date_end_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "date_end_to", date_end_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.coupon.list

Get cart coupon discounts.

Params:
- start::Int64
- count::Int64
- page_cursor::String
- coupons_ids::String
- store_id::String
- lang_id::String
- avail::Bool
- status::String
- date_start_from::String
- date_start_to::String
- date_end_from::String
- date_end_to::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartCouponList, OpenAPI.Clients.ApiResponse
"""
function cart_coupon_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, coupons_ids=nothing, store_id=nothing, lang_id=nothing, avail=nothing, status=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_list(_api; start=start, count=count, page_cursor=page_cursor, coupons_ids=coupons_ids, store_id=store_id, lang_id=lang_id, avail=avail, status=status, date_start_from=date_start_from, date_start_to=date_start_to, date_end_from=date_end_from, date_end_to=date_end_to, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_coupon_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, page_cursor=nothing, coupons_ids=nothing, store_id=nothing, lang_id=nothing, avail=nothing, status=nothing, date_start_from=nothing, date_start_to=nothing, date_end_from=nothing, date_end_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_coupon_list(_api; start=start, count=count, page_cursor=page_cursor, coupons_ids=coupons_ids, store_id=store_id, lang_id=lang_id, avail=avail, status=status, date_start_from=date_start_from, date_start_to=date_start_to, date_end_from=date_end_from, date_end_to=date_end_to, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_delete_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartDelete200Response,
)

function _oacinternal_cart_delete(_api::CartApi; delete_bridge=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cart_delete_CartApi, "/cart.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "delete_bridge", delete_bridge; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.delete

Remove store from API2Cart

Params:
- delete_bridge::Bool

Return: CartDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_delete(_api::CartApi; delete_bridge=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_delete(_api; delete_bridge=delete_bridge, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_delete(_api::CartApi, response_stream::Channel; delete_bridge=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_delete(_api; delete_bridge=delete_bridge, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_giftcard_add_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartGiftcardAdd200Response,
)

function _oacinternal_cart_giftcard_add(_api::CartApi, amount::Float64; code=nothing, owner_email=nothing, recipient_email=nothing, recipient_name=nothing, owner_name=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cart_giftcard_add_CartApi, "/cart.giftcard.add.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "amount", amount; style="form", is_explode=true)  # type Float64
    OpenAPI.Clients.set_param(_ctx.query, "code", code; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "owner_email", owner_email; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "recipient_email", recipient_email; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "recipient_name", recipient_name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "owner_name", owner_name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.giftcard.add

Use this method to create a gift card for a specified amount.

Params:
- amount::Float64 (required)
- code::String
- owner_email::String
- recipient_email::String
- recipient_name::String
- owner_name::String

Return: CartGiftcardAdd200Response, OpenAPI.Clients.ApiResponse
"""
function cart_giftcard_add(_api::CartApi, amount::Float64; code=nothing, owner_email=nothing, recipient_email=nothing, recipient_name=nothing, owner_name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_add(_api, amount; code=code, owner_email=owner_email, recipient_email=recipient_email, recipient_name=recipient_name, owner_name=owner_name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_giftcard_add(_api::CartApi, response_stream::Channel, amount::Float64; code=nothing, owner_email=nothing, recipient_email=nothing, recipient_name=nothing, owner_name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_add(_api, amount; code=code, owner_email=owner_email, recipient_email=recipient_email, recipient_name=recipient_name, owner_name=owner_name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_giftcard_count_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartGiftcardCount200Response,
)

function _oacinternal_cart_giftcard_count(_api::CartApi; store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_giftcard_count_CartApi, "/cart.giftcard.count.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.giftcard.count

Get gift cards count.

Params:
- store_id::String

Return: CartGiftcardCount200Response, OpenAPI.Clients.ApiResponse
"""
function cart_giftcard_count(_api::CartApi; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_count(_api; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_giftcard_count(_api::CartApi, response_stream::Channel; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_count(_api; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_giftcard_delete_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeDelete200Response,
)

function _oacinternal_cart_giftcard_delete(_api::CartApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cart_giftcard_delete_CartApi, "/cart.giftcard.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.giftcard.delete

Delete giftcard

Params:
- id::String (required)

Return: AttributeDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_giftcard_delete(_api::CartApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_giftcard_delete(_api::CartApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_giftcard_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartGiftCardList,
)

function _oacinternal_cart_giftcard_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_giftcard_list_CartApi, "/cart.giftcard.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_cursor", page_cursor; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.giftcard.list

Get gift cards list.

Params:
- start::Int64
- count::Int64
- page_cursor::String
- store_id::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartGiftCardList, OpenAPI.Clients.ApiResponse
"""
function cart_giftcard_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_list(_api; start=start, count=count, page_cursor=page_cursor, store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_giftcard_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, page_cursor=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_giftcard_list(_api; start=start, count=count, page_cursor=page_cursor, store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_info_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartInfo200Response,
)

function _oacinternal_cart_info(_api::CartApi; store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_info_CartApi, "/cart.info.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.info

This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.

Params:
- store_id::String
- response_fields::String
- params::String
- exclude::String

Return: CartInfo200Response, OpenAPI.Clients.ApiResponse
"""
function cart_info(_api::CartApi; store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_info(_api; store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_info(_api::CartApi, response_stream::Channel; store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_info(_api; store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_meta_data_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartMetaDataList,
)

function _oacinternal_cart_meta_data_list(_api::CartApi, entity_id::String; count=nothing, page_cursor=nothing, entity=nothing, store_id=nothing, lang_id=nothing, key=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_meta_data_list_CartApi, "/cart.meta_data.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_cursor", page_cursor; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity_id", entity_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity", entity; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "key", key; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.meta_data.list

Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.

Params:
- entity_id::String (required)
- count::Int64
- page_cursor::String
- entity::String
- store_id::String
- lang_id::String
- key::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartMetaDataList, OpenAPI.Clients.ApiResponse
"""
function cart_meta_data_list(_api::CartApi, entity_id::String; count=nothing, page_cursor=nothing, entity=nothing, store_id=nothing, lang_id=nothing, key=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_list(_api, entity_id; count=count, page_cursor=page_cursor, entity=entity, store_id=store_id, lang_id=lang_id, key=key, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_meta_data_list(_api::CartApi, response_stream::Channel, entity_id::String; count=nothing, page_cursor=nothing, entity=nothing, store_id=nothing, lang_id=nothing, key=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_list(_api, entity_id; count=count, page_cursor=page_cursor, entity=entity, store_id=store_id, lang_id=lang_id, key=key, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_meta_data_set_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeAdd200Response,
)

function _oacinternal_cart_meta_data_set(_api::CartApi, entity_id::String, key::String, value::String, namespace::String; entity=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cart_meta_data_set_CartApi, "/cart.meta_data.set.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "entity_id", entity_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "key", key; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "value", value; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "namespace", namespace; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity", entity; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "lang_id", lang_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.meta_data.set

Set meta data for a specific entity

Params:
- entity_id::String (required)
- key::String (required)
- value::String (required)
- namespace::String (required)
- entity::String
- store_id::String
- lang_id::String

Return: AttributeAdd200Response, OpenAPI.Clients.ApiResponse
"""
function cart_meta_data_set(_api::CartApi, entity_id::String, key::String, value::String, namespace::String; entity=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_set(_api, entity_id, key, value, namespace; entity=entity, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_meta_data_set(_api::CartApi, response_stream::Channel, entity_id::String, key::String, value::String, namespace::String; entity=nothing, store_id=nothing, lang_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_set(_api, entity_id, key, value, namespace; entity=entity, store_id=store_id, lang_id=lang_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_meta_data_unset_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BasketLiveShippingServiceDelete200Response,
)

function _oacinternal_cart_meta_data_unset(_api::CartApi, entity_id::String, key::String, id::String; entity=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cart_meta_data_unset_CartApi, "/cart.meta_data.unset.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "entity_id", entity_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "key", key; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entity", entity; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.meta_data.unset

Unset meta data for a specific entity

Params:
- entity_id::String (required)
- key::String (required)
- id::String (required)
- entity::String
- store_id::String

Return: BasketLiveShippingServiceDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_meta_data_unset(_api::CartApi, entity_id::String, key::String, id::String; entity=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_unset(_api, entity_id, key, id; entity=entity, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_meta_data_unset(_api::CartApi, response_stream::Channel, entity_id::String, key::String, id::String; entity=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_meta_data_unset(_api, entity_id, key, id; entity=entity, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_methods_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartMethods200Response,
)

function _oacinternal_cart_methods(_api::CartApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_methods_CartApi, "/cart.methods.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.methods

Returns a list of supported API methods.

Params:

Return: CartMethods200Response, OpenAPI.Clients.ApiResponse
"""
function cart_methods(_api::CartApi; _mediaType=nothing)
    _ctx = _oacinternal_cart_methods(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_methods(_api::CartApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_cart_methods(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_plugin_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartPluginList200Response,
)

function _oacinternal_cart_plugin_list(_api::CartApi; start=nothing, count=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_plugin_list_CartApi, "/cart.plugin.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.plugin.list

Get a list of third-party plugins installed on the store.

Params:
- start::Int64
- count::Int64
- store_id::String

Return: CartPluginList200Response, OpenAPI.Clients.ApiResponse
"""
function cart_plugin_list(_api::CartApi; start=nothing, count=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_plugin_list(_api; start=start, count=count, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_plugin_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_plugin_list(_api; start=start, count=count, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_script_add_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartScriptAdd200Response,
)

function _oacinternal_cart_script_add(_api::CartApi; name=nothing, description=nothing, html=nothing, src=nothing, load_method=nothing, scope=nothing, events=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cart_script_add_CartApi, "/cart.script.add.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "description", description; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "html", html; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "src", src; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "load_method", load_method; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "scope", scope; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "events", events; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.script.add

Add new script to the storefront

Params:
- name::String
- description::String
- html::String
- src::String
- load_method::String
- scope::String
- events::String
- store_id::String

Return: CartScriptAdd200Response, OpenAPI.Clients.ApiResponse
"""
function cart_script_add(_api::CartApi; name=nothing, description=nothing, html=nothing, src=nothing, load_method=nothing, scope=nothing, events=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_add(_api; name=name, description=description, html=html, src=src, load_method=load_method, scope=scope, events=events, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_script_add(_api::CartApi, response_stream::Channel; name=nothing, description=nothing, html=nothing, src=nothing, load_method=nothing, scope=nothing, events=nothing, store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_add(_api; name=name, description=description, html=html, src=src, load_method=load_method, scope=scope, events=events, store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_script_delete_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AttributeDelete200Response,
)

function _oacinternal_cart_script_delete(_api::CartApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_cart_script_delete_CartApi, "/cart.script.delete.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "id", id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.script.delete

Remove script from the storefront

Params:
- id::String (required)
- store_id::String

Return: AttributeDelete200Response, OpenAPI.Clients.ApiResponse
"""
function cart_script_delete(_api::CartApi, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_script_delete(_api::CartApi, response_stream::Channel, id::String; store_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_delete(_api, id; store_id=store_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_script_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartScriptList,
)

function _oacinternal_cart_script_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, script_ids=nothing, store_id=nothing, created_from=nothing, created_to=nothing, modified_from=nothing, modified_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_script_list_CartApi, "/cart.script.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_cursor", page_cursor; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "script_ids", script_ids; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "created_from", created_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "created_to", created_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modified_from", modified_from; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modified_to", modified_to; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.script.list

Get scripts installed to the storefront

Params:
- start::Int64
- count::Int64
- page_cursor::String
- script_ids::String
- store_id::String
- created_from::String
- created_to::String
- modified_from::String
- modified_to::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartScriptList, OpenAPI.Clients.ApiResponse
"""
function cart_script_list(_api::CartApi; start=nothing, count=nothing, page_cursor=nothing, script_ids=nothing, store_id=nothing, created_from=nothing, created_to=nothing, modified_from=nothing, modified_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_list(_api; start=start, count=count, page_cursor=page_cursor, script_ids=script_ids, store_id=store_id, created_from=created_from, created_to=created_to, modified_from=modified_from, modified_to=modified_to, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_script_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, page_cursor=nothing, script_ids=nothing, store_id=nothing, created_from=nothing, created_to=nothing, modified_from=nothing, modified_to=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_script_list(_api; start=start, count=count, page_cursor=page_cursor, script_ids=script_ids, store_id=store_id, created_from=created_from, created_to=created_to, modified_from=modified_from, modified_to=modified_to, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_shipping_zones_list_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ModelResponseCartShippingZonesList,
)

function _oacinternal_cart_shipping_zones_list(_api::CartApi; start=nothing, count=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_shipping_zones_list_CartApi, "/cart.shipping_zones.list.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "start", start; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "count", count; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "store_id", store_id; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "response_fields", response_fields; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "params", params; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude", exclude; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.shipping_zones.list

Get list of shipping zones

Params:
- start::Int64
- count::Int64
- store_id::String
- response_fields::String
- params::String
- exclude::String

Return: ModelResponseCartShippingZonesList, OpenAPI.Clients.ApiResponse
"""
function cart_shipping_zones_list(_api::CartApi; start=nothing, count=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_shipping_zones_list(_api; start=start, count=count, store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_shipping_zones_list(_api::CartApi, response_stream::Channel; start=nothing, count=nothing, store_id=nothing, response_fields=nothing, params=nothing, exclude=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_shipping_zones_list(_api; start=start, count=count, store_id=store_id, response_fields=response_fields, params=params, exclude=exclude, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_cart_validate_CartApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CartValidate200Response,
)

function _oacinternal_cart_validate(_api::CartApi; validate_version=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cart_validate_CartApi, "/cart.validate.json", ["StoreKeyAuth", "ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "validate_version", validate_version; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""cart.validate

This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.

Params:
- validate_version::Bool

Return: CartValidate200Response, OpenAPI.Clients.ApiResponse
"""
function cart_validate(_api::CartApi; validate_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_validate(_api; validate_version=validate_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cart_validate(_api::CartApi, response_stream::Channel; validate_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_cart_validate(_api; validate_version=validate_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export cart_catalog_price_rules_count
export cart_catalog_price_rules_list
export cart_coupon_add
export cart_coupon_condition_add
export cart_coupon_count
export cart_coupon_delete
export cart_coupon_list
export cart_delete
export cart_giftcard_add
export cart_giftcard_count
export cart_giftcard_delete
export cart_giftcard_list
export cart_info
export cart_meta_data_list
export cart_meta_data_set
export cart_meta_data_unset
export cart_methods
export cart_plugin_list
export cart_script_add
export cart_script_delete
export cart_script_list
export cart_shipping_zones_list
export cart_validate
